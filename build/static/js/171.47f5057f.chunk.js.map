{"version":3,"sources":["helpers/post.js","views/SMS/Configuration/Permissions/RolePermission.jsx"],"names":["url","body","authToken","Axios","post","rootUrl","res","response","status","history","push","connect","state","roleList","roleDataReducer","roles","props","myForm","createRef","useState","modalOpen","setModalOpen","permissionName","setPermissionName","rolelabel","setRoleLabel","roleValue","setRoleValue","confirm","setConfirm","checked","setChecked","addToast","useDispatch","useToasts","useHistory","roleName","map","role","label","name","value","id","className","onClick","onSubmit","event","preventDefault","subData","FormData","append","then","action","appearance","autoDismiss","ref","row","sm","md","lg","options","onChange","opt","get","defaultChecked","length","i","per","isChecked","permissionId","toString","selectRole","e","newChecked","val","target","perId","document","getElementById","handleSelectAll","type","htmlFor","xs","key","index","indexOf","splice","handleCheck","style","display","justifyContent","Ripple","isOpen","toggle","color"],"mappings":"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","file":"static/js/171.47f5057f.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\n\r\nimport history from './history'\r\nimport { rootUrl } from '../constants/constants'\r\n\r\n\r\nasync function post(url, body = {},authToken = \"\"){\r\n\r\n \r\n   \r\n   try {\r\n    const res = await Axios.post(`${rootUrl}${url}`,body,authToken || \"\")\r\n    return await res\r\n   }\r\n    catch (error) {\r\n\r\n        if(error?.response?.status  === 404){\r\n            history.push('/404')\r\n        }\r\n\r\n     \r\n\r\n        throw error\r\n   }\r\n   \r\n}\r\n\r\nexport default post\r\n","import React, { createRef, useEffect, useState } from 'react'\r\nimport { connect, useDispatch } from 'react-redux'\r\nimport Select from 'react-select';\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, FormText, Col, Row, Card, CardHeader, CardTitle, CardBody, UncontrolledTooltip } from 'reactstrap';\r\n\r\nimport { roleDataReducer } from '../../../../redux/reducers/SMS/RoleReducer';\r\nimport { useHistory } from 'react-router';\r\nimport post from '../../../../helpers/post';\r\nimport get from '../../../../helpers/get';\r\n\r\nconst RolePermission = (props) => {\r\n\r\n  const myForm = createRef();\r\n  const roles = props.roleList[0];\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [permissionName, setPermissionName] = useState([]);\r\n  const [rolelabel, setRoleLabel] = useState('Select Role...');\r\n  const [roleValue, setRoleValue] = useState('');\r\n  const [confirm, setConfirm] = useState(false);\r\n  let [checked, setChecked] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { addToast } = useToasts();\r\n  const history = useHistory();\r\n\r\n\r\n  // submitting form\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault(); \r\n    setModalOpen(true);\r\n    // //  watch form data values\r\n    // for (var value of subData.values()) {\r\n\r\n    //  }\r\n \r\n    if(confirm){\r\n      setPermissionName([]);\r\n      const subData = new FormData();\r\n      subData.append('RoleId',  roleValue);\r\n      subData.append('CheckedArr',checked);\r\n      // posting form Data\r\n      const returnValue = post(`RolePermission/Assign`,subData).then((action)=> {\r\n        \r\n        setChecked([]);\r\n            addToast(action, {\r\n              appearance: action == 'Permission Assigned Successfully' ? 'success': 'error',\r\n              autoDismiss: true,\r\n            })\r\n      }) \r\n    }\r\n   \r\n \r\n  }\r\n\r\n  const roleName = roles?.map(role => ({label: role.name, value: role.id}));\r\n\r\n  // onChange role \r\n  const selectRole = (label,value) => {\r\n    setPermissionName([]);\r\n    checked = [];\r\n   \r\n    setRoleLabel(label);\r\n    setRoleValue(value);\r\n\r\n    const returnValue = get(`RolePermission/GetCheckBoxes/${value}`).then((action)=>{\r\n\r\n      setPermissionName(action);\r\n      let defaultChecked = checked\r\n      if(action.length > 0){\r\n        for (let i = 0; i < action.length; i++) {\r\n          const per = action[i];\r\n          if(per.isChecked == true){\r\n            const id = per.permissionId.toString();\r\n            defaultChecked.push(id)\r\n            setChecked([...defaultChecked])\r\n          }\r\n\r\n        }\r\n      }\r\n\r\n     });\r\n\r\n\r\n  }\r\n\r\n \r\n  // onChange checkbox\r\n  const handleCheck = (e) => {\r\n\r\n    let id = e.target.id;\r\n    let val = e.target.checked;\r\n\r\n\r\n    if(val == true){\r\n    setChecked([...checked, id]);\r\n    }else{\r\n      const index = checked.indexOf(id);\r\n      if (index > -1) {\r\n        checked.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // on Select All Checkbox\r\n  const handleSelectAll = e => {\r\n    let newChecked = [];\r\n    const val = e.target.checked;\r\n    if(val == true){\r\n      permissionName.map(per => {\r\n        const perId = per.id.toString();\r\n        newChecked.push(perId);\r\n        document.getElementById(per.id).checked = true;  \r\n      })\r\n      setChecked([...newChecked]);\r\n    }\r\n\r\n    if(val == false){\r\n      {\r\n        permissionName.map(per => {\r\n          document.getElementById(per.id).checked = false;  \r\n        })\r\n        setChecked([]);\r\n      }\r\n    }\r\n   \r\n  }\r\n\r\n  // redirect to dashboard\r\n  const backToDashboard = () => {\r\n      history.push(\"/\")\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      \r\n      <Card className='uapp-card-bg'>\r\n        <CardHeader className=\"page-header \">\r\n         \r\n            <h3 className='text-light'>Assign Permissions</h3>\r\n            <div className=\"page-header-back-to-home\">\r\n              <span onClick={backToDashboard} className='text-light'> <i className=\"fas fa-arrow-circle-left\"></i> Back to Dashboard</span>\r\n            </div>\r\n         \r\n        </CardHeader>\r\n      </Card>\r\n\r\n       <Card>\r\n          <CardHeader>\r\n           Select Role\r\n          </CardHeader>\r\n          <CardBody>\r\n          <Form onSubmit={handleSubmit} ref={myForm}>\r\n          <FormGroup row>\r\n          <Col sm=\"6\" md=\"4\" lg=\"3\">\r\n            <Select\r\n                  options={roleName}\r\n                  value={{label: rolelabel, value: roleValue }}\r\n                  onChange={opt => selectRole(opt.label, opt.value)}\r\n                  name=\"type\"\r\n                  id=\"type\"\r\n            />\r\n            </Col>\r\n            </FormGroup>\r\n         \r\n            <FormGroup>\r\n\r\n              <Row>\r\n              <Col sm=\"12\">\r\n              {\r\n                permissionName.length > 0 &&\r\n                <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" onChange={(e)=>handleSelectAll(e)} type=\"checkbox\" name=\"\" />\r\n                    <label className=\"form-check-label\" htmlFor=\"\">Select All</label>\r\n                  </div>\r\n              }\r\n     \r\n              </Col>\r\n              {\r\n                roleValue != null &&\r\n                permissionName?.map(per =>\r\n                \r\n                  <Col xs=\"6\" sm=\"4\" md=\"3\" key={per.id}>\r\n                  <div className=\"form-check\">\r\n                    <input className=\"form-check-input\" onChange={(e)=>handleCheck(e)} type=\"checkbox\" name=\"\" id={per.id} defaultChecked={per.isChecked} />\r\n                    <label className=\"form-check-label\" htmlFor=\"\">{per.permissionName}</label>\r\n                  </div>\r\n                  </Col>\r\n                  )\r\n              }\r\n              </Row>\r\n            </FormGroup>\r\n\r\n            <FormGroup style={{display: 'flex',justifyContent: 'space-between'}}>\r\n                      <Row>\r\n\r\n                        <Col>\r\n                        <Button.Ripple\r\n                        type=\"submit\"\r\n                        className=\"mr-1 mt-3 badge-primary\"\r\n                      >\r\n                        Submit\r\n                      </Button.Ripple>\r\n                        </Col>\r\n\r\n                      </Row>\r\n                  </FormGroup>\r\n\r\n\r\n            </Form>\r\n            <Modal isOpen={modalOpen} toggle={()=>setModalOpen(!modalOpen)} className=\"uapp-modal\">\r\n              <ModalBody>\r\n                 <p>Are You Sure to Assign Selected Permissions?</p>\r\n                 <Row className=\"mt-3\">\r\n                   <Col md=\"6\" className=\"text-left\">\r\n                   <Button color=\"success\" onClick={()=> setConfirm(true)}>Yes</Button>\r\n                   </Col>\r\n                   <Col md=\"6\" className=\"text-right\">\r\n                 <Button color=\"danger\" onClick={()=> setModalOpen(false)}>Cancel</Button>\r\n                   </Col>\r\n                 </Row>\r\n              </ModalBody>\r\n            </Modal>\r\n          </CardBody>\r\n\r\n          </Card>\r\n          \r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n  roleList: state.roleDataReducer.roles\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps)(RolePermission);\r\n"],"sourceRoot":""}