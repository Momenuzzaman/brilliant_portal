{"version":3,"sources":["views/SMS/Components/ButtonForFunction.js","helpers/put.js","views/SMS/Components/CustomButtonRipple.js","views/SMS/University/UpdateIntake.jsx"],"names":["ButtonForFunction","className","icon","color","type","permission","func","url","name","onClick","body","authToken","Axios","put","rootUrl","res","response","status","history","push","CustomButtonRipple","includes","Ripple","UpdateIntake","useState","month","setMonth","selectedMonth","setSelectedMonth","selectedYear","setSelectedYear","monthId","setMonthId","yearId","setYearId","setIntake","year","setYear","useHistory","id","useParams","addToast","useToasts","useEffect","get","then","catch","monthMenu","map","monthOptions","label","value","yearMenu","yearOptions","onSubmit","event","preventDefault","subData","FormData","target","action","console","log","data","message","appearance","autoDismiss","pathname","row","md","style","fontSize","options","onChange","opt","display","justifyContent"],"mappings":"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","file":"static/js/153.7639d8c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n   \r\n    Button,\r\n  \r\n  } from \"reactstrap\";\r\n\r\nconst ButtonForFunction = ({className, icon,color, permission, type,url, func, name}) => {\r\n    // const {className, icon} = props;\r\n\r\n    // console.log(className);\r\n    // console.log(url);\r\n\r\n    // console.log('Trying New Type of Props',func, className, icon, permission);\r\n\r\n\r\n    const data = [1,2,3,4,6];\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n          {/* {\r\n            data.includes(permission) ?  */}\r\n            <Button\r\n               onClick={func}\r\n               color={color}\r\n               type={type}\r\n               className={className}\r\n             >\r\n               {\" \"}\r\n               {icon}{name}{\" \"}\r\n            </Button>\r\n            {/* :\r\n            null\r\n          }    */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ButtonForFunction;","import Axios from 'axios'\r\n\r\n\r\nimport history from './history'\r\nimport { rootUrl } from '../constants/constants'\r\n\r\n\r\nasync function put(url, body = {},authToken = \"\"){\r\n\r\n\r\n   \r\n   try {\r\n    const res = await Axios.put(`${rootUrl}${url}`,body,authToken || \"\")\r\n    return await res\r\n   }\r\n    catch (error) {\r\n\r\n        if(error.response.status  === 404){\r\n            history.push('/404')\r\n        }\r\n\r\n \r\n\r\n        throw error\r\n   }\r\n}\r\n\r\nexport default put\r\n","import React from 'react';\r\nimport {\r\n   \r\n    Button,\r\n  \r\n  } from \"reactstrap\";\r\n\r\nconst CustomButtonRipple = ({className, icon,color, permission, type,url, func, name}) => {\r\n\r\n    const data = [1,2,3,4,6];\r\n\r\n    return (\r\n        <>\r\n          {\r\n            data.includes(permission) ? \r\n            <Button.Ripple\r\n               onClick={func}\r\n               color={color}\r\n               type={type}\r\n               className={className}\r\n             >\r\n               {name}\r\n            </Button.Ripple>\r\n            :\r\n            null\r\n          }   \r\n        </>\r\n    );\r\n};\r\n\r\nexport default CustomButtonRipple;","import { FormGroup } from '@mui/material';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    ButtonGroup,\r\n  \r\n    Button,\r\n  \r\n    Input,\r\n  \r\n    Col,\r\n    Row,\r\n    Table,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Form,\r\n  } from \"reactstrap\";\r\n  import Select from \"react-select\";\r\n  import { useHistory, useLocation } from \"react-router\";\r\nimport get from '../../../helpers/get';\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport put from '../../../helpers/put';\r\nimport CustomButtonRipple from '../Components/CustomButtonRipple';\r\nimport ButtonForFunction from '../Components/ButtonForFunction';\r\n\r\nconst UpdateIntake = () => {\r\n\r\n    const [month, setMonth] = useState([]);\r\n    const [selectedMonth, setSelectedMonth] = useState('');\r\n    const [selectedYear, setSelectedYear] = useState('');\r\n    const [monthId, setMonthId] = useState('');\r\n    const [yearId, setYearId] = useState('');\r\n    const [intake, setIntake] = useState({});\r\n    const [year, setYear] = useState([]);\r\n    const history = useHistory();\r\n\r\n    \r\n    const {id} = useParams();\r\n    const { addToast } = useToasts();\r\n\r\n    useEffect(()=>{\r\n\r\n      get(`Intake/Get/${id}`).then(res=> {\r\n          setIntake(res);\r\n          setSelectedMonth(res?.month?.name);\r\n          setSelectedYear(res?.year?.name);\r\n          setMonthId(res?.month?.id);\r\n          setYearId(res?.year?.id);\r\n      })\r\n      .catch(); \r\n      },[id])\r\n\r\n\r\n      useEffect(()=>{\r\n\r\n        get('Month/GetAll').then(res=> {\r\n          setMonth(res);\r\n        })\r\n        .catch();\r\n\r\n        get('Year/GetAll').then(res=> {\r\n            setYear(res);\r\n          })\r\n          .catch();\r\n      },[])\r\n\r\n\r\n      const monthMenu = month.map(monthOptions =>({label:monthOptions.name, value:monthOptions.id}));\r\n      const yearMenu = year.map(yearOptions =>({label:yearOptions.name, value:yearOptions.id}));\r\n\r\n\r\n\r\n    const handleCancel = () =>{\r\n        history.push(\"/intake\");\r\n    }\r\n\r\n    const selectMonthType = (label, value) => {\r\n        setSelectedMonth(label);\r\n        console.log('month',label,value);\r\n        setMonthId(value); \r\n      }\r\n\r\n      const selectYearType = (label, value) => {\r\n        setSelectedYear(label);\r\n        console.log('year',label, value);\r\n        setYearId(value); \r\n      }\r\n\r\n      const handleUpdate = (event) =>{\r\n        event.preventDefault();\r\n        const subData = new FormData(event.target);\r\n        // for(let i of subData.values()){\r\n        \r\n        // }\r\n        put(`Intake/Update`, subData).then(action => {\r\n          console.log(action);\r\n          addToast(action?.data?.message, {\r\n            appearance: 'success',\r\n            autoDismiss: true,\r\n          })\r\n          history.push({\r\n            pathname: \"/intake\",\r\n          });\r\n        });\r\n      }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <Card className=\"uapp-card-bg m-3 p-2\">\r\n                    <CardHeader className=\"page-header\">\r\n                        <h6 className=\"text-light my-auto\">Update intake</h6>\r\n                    </CardHeader>\r\n                </Card>\r\n\r\n                <Form onSubmit={handleUpdate} className='m-3'>\r\n\r\n                   <input type='hidden'\r\n                    name='id'\r\n                    id='id'\r\n                    value={id} />\r\n\r\n                    <FormGroup row>\r\n                        <Col md=\"4\">\r\n                            <span>\r\n                               <span style={{color: '#1e98b0', fontSize: '14px'}}>Intake Month</span> <span className=\"text-danger\">*</span>{\" \"}\r\n                            </span>\r\n                        </Col>\r\n\r\n                        <Col md=\"4\">\r\n                        <Select\r\n                            options={monthMenu}\r\n                            value={{ label: selectedMonth, value: monthId }}\r\n                            onChange={(opt) => selectMonthType(opt.label, opt.value)}\r\n                            name=\"monthId\"\r\n                            id=\"monthId\"\r\n                        />\r\n                        </Col>\r\n\r\n                        <Col md=\"4\">\r\n\r\n                        </Col>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup row className='mt-3'>\r\n                        <Col md=\"4\">\r\n                            <span>\r\n                               <span style={{color: '#1e98b0', fontSize: '14px'}}>Intake Year</span> <span className=\"text-danger\">*</span>{\" \"}\r\n                            </span>\r\n                        </Col>\r\n\r\n                        <Col md=\"4\">\r\n                        <Select\r\n                            options={yearMenu}\r\n                            value={{ label: selectedYear, value: yearId }}\r\n                            onChange={(opt) => selectYearType(opt.label, opt.value)}\r\n                            name=\"yearId\"\r\n                            id=\"yearId\"\r\n                        />\r\n\r\n                        <FormGroup\r\n                            className=\"has-icon-left position-relative mt-3\"\r\n                            style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                     >\r\n                       \r\n                        <CustomButtonRipple\r\n                          type={\"submit\"}\r\n                          className={\"mr-1 mt-3 badge-primary mx-auto\"}\r\n                          name={\"Update\"}\r\n                          permission={6}\r\n                        />\r\n\r\n                     </FormGroup>\r\n\r\n                        </Col>\r\n\r\n                        <Col md=\"4\" className=\"d-flex justify-content-end align-items-end\">\r\n                            <div>\r\n                                \r\n                                <ButtonForFunction\r\n                                  func={handleCancel}\r\n                                  className={'btn btn-danger mt-md-3'}\r\n                                  name={\"Cancel\"}\r\n                                  permission={6}\r\n                                />\r\n\r\n                            </div>\r\n                        </Col>\r\n                    </FormGroup>\r\n\r\n                    \r\n                </Form>\r\n\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateIntake;"],"sourceRoot":""}