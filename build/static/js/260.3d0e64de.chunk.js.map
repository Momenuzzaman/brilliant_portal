{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","views/SMS/UniversitySubjects/FileUpload.js"],"names":["_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","i","F","s","n","length","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","FileUpload","useState","selectedFile","setSelectedFile","isFilePicked","setIsFilePicked","setValue","type","name","accept","onChange","event","console","log","target","files","ext","split","pop","size","lastModifiedDate","toLocaleDateString","onClick","formData","FormData","append","values"],"mappings":"8GAAA,8CACe,SAASA,EAA2BC,GACjD,GAAsB,qBAAXC,QAAgD,MAAtBD,EAAEC,OAAOC,UAAmB,CAC/D,GAAIC,MAAMC,QAAQJ,KAAOA,EAAI,YAA2BA,IAAK,CAC3D,IAAIK,EAAI,EAEJC,EAAI,aAER,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIH,GAAKL,EAAES,OAAe,CACxBC,MAAM,GAED,CACLA,MAAM,EACNC,MAAOX,EAAEK,OAGbO,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGR,GAIP,MAAM,IAAIS,UAAU,yIAGtB,IAAIC,EAGAC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLZ,EAAG,WACDS,EAAKhB,EAAEC,OAAOC,aAEhBM,EAAG,WACD,IAAIY,EAAOJ,EAAGK,OAEd,OADAH,EAAmBE,EAAKV,KACjBU,GAETR,EAAG,SAAWU,GACZH,GAAS,EACTF,EAAMK,GAERR,EAAG,WACD,IACOI,GAAoC,MAAhBF,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAIG,EAAQ,MAAMF,O,6ECoBXM,UApEI,WACf,MAAwCC,qBAAxC,mBAAOC,EAAP,KAAqBC,EAArB,KACH,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACG,EAA0BJ,mBAAS,IAAnC,mBAAcK,GAAd,WA0CA,OACI,6BACI,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,OAAO,iCAAiCC,SAzCzD,SAACC,GAAW,IAAD,EAC7BC,QAAQC,IAAIF,EAAMG,OAAOC,MAAM,GAAGP,MAClC,IACIQ,GADM,UAAGL,EAAMG,OAAOC,MAAM,UAAtB,aAAG,EAAuBP,MACnBS,MAAM,KAAKC,MAC5BN,QAAQC,IAAI,YAAYG,GAChB,OAALA,GAAmB,QAALA,GAAoB,OAALA,GAAmB,OAALA,GAC1Cb,EAAgBQ,EAAMG,OAAOC,MAAM,IACzCV,GAAgB,IAGVF,EAAgB,OAgCxBC,EACA,6BACC,wCAAcF,EAAaM,MAC3B,wCAAcN,EAAaK,MAC3B,6CAAmBL,EAAaiB,MAChC,+CACmB,IACjBjB,EAAakB,iBAAiBC,uBAIjC,4DAED,6BACC,4BAAQC,QAxCc,WACxB,IAAMC,EAAW,IAAIC,SAErBD,EAASE,OAAO,OAAQvB,GAHM,oBAINqB,EAASG,UAJH,IAIxB,2BAAqC,CAAC,IAA7BtC,EAA4B,QACjCkB,EAASlB,IALW,8BAmBxBwB,QAAQC,IAAI,WAAWU,KAqB3B","file":"static/js/260.3d0e64de.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, {useState} from 'react';\r\n\r\nconst FileUpload = () => {\r\n    const [selectedFile, setSelectedFile] = useState();\r\n\tconst [isFilePicked, setIsFilePicked] = useState(false);\r\n    const [value, setValue] = useState({});\r\n    // const [message, setMessage] = useState(\"\");\r\n\r\n    const changeHandler = (event) => {\r\n        console.log(event.target.files[0].name);\r\n        var myFile = event.target.files[0]?.name;\r\n        var ext = myFile.split('.').pop();\r\n        console.log(\"extension\",ext)\r\n        if(ext==\"pdf\" || ext==\"docx\" || ext==\"doc\" || ext==\"xls\"){\r\n            setSelectedFile(event.target.files[0]);\r\n\t\t    setIsFilePicked(true);\r\n        }\r\n        else{\r\n            setSelectedFile(\"\");\r\n        }\r\n\r\n\t\t\r\n\t};\r\n\r\n\tconst handleSubmission = () => {\r\n\t\tconst formData = new FormData();\r\n\r\n\t\tformData.append('File', selectedFile);\r\n        for (var value of formData.values()) {\r\n            setValue(value);\r\n        }\r\n\r\n        // var myFile = value?.name;\r\n        // console.log(myFile);\r\n        // var ext = myFile.split('.').pop();\r\n        // console.log(\"extension\",ext)\r\n        // if(ext==\"pdf\" || ext==\"docx\" || ext==\"doc\" || ext==\"xls\"){\r\n        //     alert(\"upload file\", ext);\r\n        // }\r\n        // else{\r\n        //     alert(\"Cannot upload this format.\", ext);\r\n        // }\r\n\r\n        console.log(\"formData\",formData);\r\n\t\t\r\n\t};\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" name=\"file\" accept=\".xls, .xlsx, .pdf, .docx, .doc\" onChange={changeHandler} />\r\n\t\t\t{isFilePicked ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Filename: {selectedFile.name}</p>\r\n\t\t\t\t\t<p>Filetype: {selectedFile.type}</p>\r\n\t\t\t\t\t<p>Size in bytes: {selectedFile.size}</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tlastModifiedDate:{' '}\r\n\t\t\t\t\t\t{selectedFile.lastModifiedDate.toLocaleDateString()}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<p>Select a file to show details</p>\r\n\t\t\t)}\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={handleSubmission}>Submit</button>\r\n\t\t\t</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FileUpload;"],"sourceRoot":""}