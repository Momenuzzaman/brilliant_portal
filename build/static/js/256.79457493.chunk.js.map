{"version":3,"sources":["components/core/breadCrumbs/BreadCrumb.js","views/forms/formik/FormikBasic.js","views/forms/formik/FormikErrorMsg.js","views/forms/formik/FormikValidation.js","views/forms/formik/Formik.js"],"names":["BreadCrumbs","className","this","props","breadCrumbTitle","tag","to","size","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","active","breadCrumbActive","color","style","left","right","React","Component","FormikBasic","Card","CardHeader","CardTitle","CardBody","initialValues","firstName","lastName","email","onSubmit","values","setTimeout","toast","success","JSON","stringify","render","FormGroup","htmlFor","name","placeholder","type","Button","Ripple","SignUpSchema","Yup","shape","required","min","max","FormikErrorMsg","validationSchema","errors","touched","component","msg","formSchema","number","url","date","minlength","maxlength","FormValidation","Label","for","id","Formik","Fragment","Row","Col","lg","md","sm","FormikValidation"],"mappings":"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","file":"static/js/256.79457493.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from \"reactstrap\"\r\nimport { Home, Settings } from \"react-feather\"\r\nimport { NavLink } from \"react-router-dom\"\r\nclass BreadCrumbs extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"content-header row\">\r\n        <div className=\"content-header-left col-md-9 col-12 mb-2\">\r\n          <div className=\"row breadcrumbs-top\">\r\n            <div className=\"col-12\">\r\n              {this.props.breadCrumbTitle ? (\r\n                <h2 className=\"content-header-title float-left mb-0\">\r\n                  {this.props.breadCrumbTitle}\r\n                </h2>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <div className=\"breadcrumb-wrapper vx-breadcrumbs d-sm-block d-none col-12\">\r\n                <Breadcrumb tag=\"ol\">\r\n                  <BreadcrumbItem tag=\"li\">\r\n                    <NavLink to=\"/\">\r\n                      <Home className=\"align-top\" size={15} />\r\n                    </NavLink>\r\n                  </BreadcrumbItem>\r\n                  <BreadcrumbItem tag=\"li\" className=\"text-primary\">\r\n                    {this.props.breadCrumbParent}\r\n                  </BreadcrumbItem>\r\n                  {this.props.breadCrumbParent2 ? (\r\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\r\n                      {this.props.breadCrumbParent2}\r\n                    </BreadcrumbItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {this.props.breadCrumbParent3 ? (\r\n                    <BreadcrumbItem tag=\"li\" className=\"text-primary\">\r\n                      {this.props.breadCrumbParent3}\r\n                    </BreadcrumbItem>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  <BreadcrumbItem tag=\"li\" active>\r\n                    {this.props.breadCrumbActive}\r\n                  </BreadcrumbItem>\r\n                </Breadcrumb>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"content-header-right text-md-right col-md-3 col-12 d-md-block d-none\">\r\n          <div className=\"form-group breadcrum-right dropdown\">\r\n            <UncontrolledButtonDropdown>\r\n              <DropdownToggle\r\n                color=\"primary\"\r\n                size=\"sm\"\r\n                className=\"btn-icon btn-round dropdown-toggle\"\r\n              >\r\n                <Settings\r\n                  size={14}\r\n                  style={{\r\n                    left: 0\r\n                  }}\r\n                />\r\n              </DropdownToggle>\r\n              <DropdownMenu tag=\"ul\" right>\r\n                <DropdownItem tag=\"li\">\r\n                  <NavLink className=\"text-dark w-100\" to=\"/Example\">\r\n                    Example\r\n                  </NavLink>\r\n                </DropdownItem>\r\n              \r\n              </DropdownMenu>\r\n            </UncontrolledButtonDropdown>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default BreadCrumbs\r\n","import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  Button,\r\n  FormGroup\r\n} from \"reactstrap\"\r\nimport { Formik, Field, Form } from \"formik\"\r\nimport { ToastContainer, toast } from \"react-toastify\"\r\nimport \"react-toastify/dist/ReactToastify.css\"\r\n\r\nclass FormikBasic extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Basic</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <p>\r\n            Getting values in and out of form state is easy using formik, you\r\n            won't have to manage state to make your input a controlled element.\r\n          </p>\r\n          <Formik\r\n            initialValues={{\r\n              firstName: \"\",\r\n              lastName: \"\",\r\n              email: \"\"\r\n            }}\r\n            onSubmit={values => {\r\n              setTimeout(() => {\r\n                toast.success(JSON.stringify(values, null, 2))\r\n              }, 500)\r\n            }}\r\n            render={() => (\r\n              <Form>\r\n                <FormGroup>\r\n                  <label htmlFor=\"firstName\">First Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    placeholder=\"Jane\"\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"lastName\">Last Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"lastName\"\r\n                    placeholder=\"Doe\"\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    placeholder=\"jane@acme.com\"\r\n                    type=\"email\"\r\n                  />\r\n                </FormGroup>\r\n                <Button.Ripple color=\"primary\" type=\"submit\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Form>\r\n            )}\r\n          />\r\n          <ToastContainer />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default FormikBasic\r\n","import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  Button,\r\n  FormGroup\r\n} from \"reactstrap\"\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\"\r\nimport * as Yup from \"yup\"\r\n\r\nconst SignUpSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(\"Invalid email address\")\r\n    .required(\"Required\"),\r\n  firstName: Yup.string()\r\n    .min(2, \"Must be longer than 2 characters\")\r\n    .max(20, \"Nice try, nobody has a first name that long\")\r\n    .required(\"Required\"),\r\n  lastName: Yup.string()\r\n    .min(2, \"Must be longer than 2 characters\")\r\n    .max(20, \"Nice try, nobody has a last name that long\")\r\n    .required(\"Required\")\r\n})\r\n\r\nclass FormikErrorMsg extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Error Msg</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <p>\r\n            You can show error messages with formik using{\" \"}\r\n            <code>validationSchema</code> prop with formik tag.\r\n          </p>\r\n          <Formik\r\n            initialValues={{\r\n              email: \"\",\r\n              firstName: \"\",\r\n              lastName: \"\"\r\n            }}\r\n            validationSchema={SignUpSchema}\r\n            render={({ errors, touched }) => (\r\n              <Form>\r\n                <FormGroup>\r\n                  <label htmlFor=\"firstName\">First Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    placeholder=\"Jane\"\r\n                    type=\"text\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"firstName\"\r\n                    component=\"div\"\r\n                    className=\"field-error text-danger\"\r\n                  />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"lastName\">Last Name</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"lastName\"\r\n                    placeholder=\"Doe\"\r\n                    type=\"text\"\r\n                  />\r\n                  <ErrorMessage name=\"firstName\">\r\n                    {(msg /** this is the same as the above */) => (\r\n                      <div className=\"field-error text-danger\">{msg}</div>\r\n                    )}\r\n                  </ErrorMessage>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <Field\r\n                    className=\"form-control\"\r\n                    name=\"email\"\r\n                    placeholder=\"jane@acme.com\"\r\n                    type=\"email\"\r\n                  />\r\n                  {/* This will render a string */}\r\n                  <ErrorMessage name=\"email\">\r\n                    {(msg /** this is the same as the above */) => (\r\n                      <div className=\"field-error text-danger\">{msg}</div>\r\n                    )}\r\n                  </ErrorMessage>\r\n                </FormGroup>\r\n\r\n                <Button.Ripple color=\"primary\" className=\"mt-1\" type=\"submit\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Form>\r\n            )}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default FormikErrorMsg\r\n","import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  FormGroup,\r\n  Button,\r\n  Label\r\n} from \"reactstrap\"\r\nimport { Formik, Field, Form } from \"formik\"\r\nimport * as Yup from \"yup\"\r\n\r\nconst formSchema = Yup.object().shape({\r\n  required: Yup.string().required(\"Required\"),\r\n  email: Yup.string()\r\n    .email(\"Invalid email\")\r\n    .required(\"Required\"),\r\n  number: Yup.number().required(\"Required\"),\r\n  url: Yup.string()\r\n    .url()\r\n    .required(\"Required\"),\r\n  date: Yup.date().required(\"Required\"),\r\n  minlength: Yup.string()\r\n    .min(4, \"Too Short!\")\r\n    .required(\"Required\"),\r\n  maxlength: Yup.string()\r\n    .max(5, \"Too Long!\")\r\n    .required(\"Required\")\r\n})\r\n\r\nclass FormValidation extends React.Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle> Validation</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Formik\r\n            initialValues={{\r\n              required: \"\",\r\n              email: \"\",\r\n              url: \"\",\r\n              number: \"\",\r\n              date: \"\",\r\n              minlength: \"\",\r\n              maxlength: \"\"\r\n            }}\r\n            validationSchema={formSchema}\r\n          >\r\n            {({ errors, touched }) => (\r\n              <Form>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"required\">Name</Label>\r\n                  <Field\r\n                    name=\"required\"\r\n                    id=\"required\"\r\n                    className={`form-control ${errors.required &&\r\n                      touched.required &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.required && touched.required ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.required}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"email\">Email</Label>\r\n                  <Field\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    className={`form-control ${errors.email &&\r\n                      touched.email &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.email && touched.email ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.email}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"url\">Website URL</Label>\r\n                  <Field\r\n                    name=\"url\"\r\n                    id=\"url\"\r\n                    className={`form-control ${errors.url &&\r\n                      touched.url &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.url && touched.url ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.url}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"number\">Number</Label>\r\n                  <Field\r\n                    name=\"number\"\r\n                    id=\"number\"\r\n                    className={`form-control ${errors.number &&\r\n                      touched.number &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.number && touched.number ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.number}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"date\">Date</Label>\r\n                  <Field\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    id=\"date\"\r\n                    className={`form-control ${errors.date &&\r\n                      touched.date &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.date && touched.date ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.date}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"minlength\">\r\n                    Min Length (Minimum 4 Characters)\r\n                  </Label>\r\n                  <Field\r\n                    name=\"minlength\"\r\n                    id=\"minlength\"\r\n                    className={`form-control ${errors.minlength &&\r\n                      touched.minlength &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.minlength && touched.minlength ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.minlength}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <FormGroup className=\"my-3\">\r\n                  <Label for=\"maxlength\">\r\n                    Max Length (Maximum 5 Characters)\r\n                  </Label>\r\n                  <Field\r\n                    name=\"maxlength\"\r\n                    id=\"maxlength\"\r\n                    className={`form-control ${errors.maxlength &&\r\n                      touched.maxlength &&\r\n                      \"is-invalid\"}`}\r\n                  />\r\n                  {errors.maxlength && touched.maxlength ? (\r\n                    <div className=\"invalid-tooltip mt-25\">{errors.maxlength}</div>\r\n                  ) : null}\r\n                </FormGroup>\r\n                <Button.Ripple color=\"primary\" type=\"submit\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\nexport default FormValidation\r\n","import React from \"react\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport Breadcrumbs from \"../../../components/core/breadCrumbs/BreadCrumb\"\r\nimport FormikBasic from \"./FormikBasic\"\r\nimport FormikErrorMsg from \"./FormikErrorMsg\"\r\nimport FormikValidation from \"./FormikValidation\"\r\n\r\nclass Formik extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Breadcrumbs\r\n          breadCrumbTitle=\"Formik\"\r\n          breadCrumbParent=\"Form\"\r\n          breadCrumbActive=\"Formik\"\r\n        />\r\n        <Row>\r\n          <Col lg=\"6\" md=\"12\">\r\n            <FormikBasic />\r\n          </Col>\r\n          <Col lg=\"6\" md=\"12\">\r\n            <FormikErrorMsg />\r\n          </Col>\r\n          <Col sm=\"12\">\r\n            <FormikValidation />\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default Formik\r\n"],"sourceRoot":""}