{"version":3,"sources":["views/SMS/Components/ButtonForFunction.js","views/SMS/Components/LinkButton.js","views/SMS/Pagination/Pagination.jsx","views/SMS/Configuration/Menu/MenuInfo.js"],"names":["ButtonForFunction","className","icon","color","type","permission","func","url","name","disable","onClick","disabled","LinkButton","props","target","activeStyle","to","Pagination","PageIndex","TotalPages","PreviousPage","NextPage","dataPerPage","totalData","paginate","currentPage","totalpages","Math","ceil","startpage","endpage","pageNumbers","i","push","md","style","cursor","map","number","key","textAlign","marginTop","paddingRight","connect","state","employeeTypeList","employeeTypeDataReducer","employeeType","history","useHistory","useState","setEmployeeName","serialNum","loading","location","useLocation","addToast","useToasts","menuList","setMenuList","useEffect","undefined","id","localStorage","setItem","dsn","label","value","empt","get","then","res","lg","sm","xs","men","scope","title","displayOrder","variant","menuId","remove","appearance","newMenuList","filter","em"],"mappings":"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","file":"static/js/263.de2c53a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n   \r\n    Button,\r\n  \r\n  } from \"reactstrap\";\r\n\r\nconst ButtonForFunction = ({className, icon,color, permission, type,url, func, name,disable}) => {\r\n    // const {className, icon} = props;\r\n\r\n \r\n\r\n\r\n    const data = [1,2,3,4,6];\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n          {/* {\r\n            data.includes(permission) ?  */}\r\n            <Button\r\n               onClick={func}\r\n               color={color}\r\n               type={type}\r\n               className={className}\r\n               disabled={disable}\r\n             >\r\n               {\" \"}\r\n               {icon}{name}{\" \"}\r\n            </Button>\r\n            {/* :\r\n            null\r\n          }    */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ButtonForFunction;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'reactstrap';\r\n\r\nconst LinkButton = (props) => {\r\n    const {url, color, className, icon, permission, name, func,target, activeStyle} = props;\r\n\r\n    const data = [1,2,3,4,6];\r\n\r\n    \r\n    return (\r\n        <>\r\n\r\n\r\n        <Link to={url} activeStyle ={activeStyle} target={target}>\r\n       \r\n            <Button color={color} className={className} onClick={func}>\r\n               {icon} {name}\r\n            </Button>\r\n         \r\n        </Link>\r\n        \r\n            \r\n        </>\r\n    );\r\n};\r\n\r\nexport default LinkButton;","import React from 'react'\r\nimport {Row,Col} from 'reactstrap'\r\nconst Pagination = ({ dataPerPage, totalData, paginate, currentPage }) => {\r\n\r\n    let PageIndex = 0;\r\n    let PageSize = 0;\r\n    let TotalCount = 0;\r\n    let TotalPages = 0;\r\n    let PreviousPage = 0;\r\n    let NextPage = 0;\r\n  \r\n    const totalpages = Math.ceil(totalData / dataPerPage);\r\n    let startpage = currentPage - 5;\r\n    let endpage = currentPage + 4;\r\n    if (startpage <= 0) {\r\n        endpage = endpage - (startpage - 1);\r\n        startpage = 1;\r\n    }\r\n    if (endpage > totalpages) {\r\n        endpage = totalpages;\r\n        if (endpage > 10) {\r\n            startpage = endpage - 9;\r\n        }\r\n    }\r\n    TotalCount = totalData;\r\n    PageIndex = currentPage;\r\n    PageSize = dataPerPage;\r\n    TotalPages = totalpages;\r\n    PreviousPage = startpage;\r\n    NextPage = endpage;\r\n\r\n\r\n    // const prev = currentPage > 1 ? (currentPage - 1) : 1;\r\n    // const last = Math.ceil(totalData / dataPerPage);\r\n    //     for (let i = 1; i <= Math.ceil(totalData/dataPerPage); i++) {\r\n\r\n    //         pageNumbers.push(i)\r\n    //     }\r\n\r\n    // let newPageNumbers;\r\n\r\n    // if(pageNumbers.length>10){\r\n    //  newPageNumbers = pageNumbers.slice(0,10)\r\n    // }\r\n    const pageNumbers = [];\r\n    const last = NextPage;\r\n    const next = (last === currentPage) ? currentPage : currentPage + 1;\r\n\r\n    const prev = PreviousPage;\r\n    \r\n    for (let i = PreviousPage; i <= NextPage; i++){\r\n        pageNumbers.push(i)\r\n    }\r\n\r\n        return (\r\n         <Row>\r\n             <Col md=\"6\">\r\n             <nav className=\"page navigation uapp-pagination\">\r\n                <ul className=\"pagination ml-2\">\r\n\r\n                    {\r\n                        PageIndex > 1 &&\r\n                        <>\r\n                  <li className=\"pagination-item pagination-First\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(1)} className=\"page-link\">\r\n                            First\r\n                        </p>\r\n                    </li>\r\n\r\n                    <li className=\"pagination-item\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(PageIndex - 1)} className=\"page-link\">\r\n                      <i className=\"fas fa-chevron-left\"></i>\r\n                        </p>\r\n                    </li>\r\n                        </>\r\n                    }\r\n\r\n                    \r\n\r\n                    {\r\n\r\n                        pageNumbers.map(number =>\r\n\r\n                            PageIndex==number ?\r\n                            <li key={number} className=\"pagination-item \">\r\n                                <p style={{ cursor: 'pointer' }} onClick={() => paginate(number)} className=\"page-link page-active\">\r\n                                    {number}\r\n                                </p>\r\n                            </li>\r\n                            :\r\n                            <li key={number} className=\"pagination-item\">\r\n                            <p style={{ cursor: 'pointer' }} onClick={() => paginate(number)} className=\"page-link\">\r\n                                {number}\r\n                            </p>\r\n                        </li>\r\n\r\n                        )\r\n                    }\r\n                    {\r\n                        PageIndex < TotalPages &&\r\n                        <>\r\n                        <li className=\"pagination-item\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(PageIndex + 1)} className=\"page-link\">\r\n                      <i className=\"fas fa-chevron-right\"></i>\r\n                        </p>\r\n                    </li>\r\n                  <li className=\"pagination-item pagination-Last\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(TotalPages)} className=\"page-link\">\r\n                            Last\r\n                        </p>\r\n                    </li>\r\n                        </>\r\n                    }\r\n                </ul>\r\n            </nav>\r\n             </Col>\r\n\r\n             <Col md=\"6\" style={{textAlign: 'right', marginTop: '1.5%', paddingRight: '2.5%'}}>\r\n                 <h5>Total Results Found: {totalData}</h5>\r\n             </Col>\r\n         </Row>\r\n        )\r\n}\r\n\r\nexport default Pagination","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Card, CardBody, CardHeader, ButtonGroup, CardTitle,  Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, FormText, Col, Row, Table, Dropdown, DropdownItem, DropdownMenu, DropdownToggle } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport Pagination from '../../Pagination/Pagination.jsx'\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport { divIcon } from 'leaflet';\r\nimport get from '../../../../helpers/get.js';\r\nimport remove from '../../../../helpers/remove.js';\r\nimport { Link } from 'react-router-dom';\r\nimport LinkButton from '../../Components/LinkButton.js';\r\nimport ButtonForFunction from '../../Components/ButtonForFunction.js';\r\n\r\nconst EmployeeList = (props) => {\r\n\r\n    const history = useHistory();\r\n    const [employeeList, setEmployeeList] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [employeeName, setEmployeeName] = useState('Select Employee Type...');\r\n    const [employeeId, setEmployeeId] = useState(0);\r\n    const [searchStr, setSearchStr] = useState('');\r\n    const [dataPerPage,setDataPerPage] = useState(15);\r\n    const [entity, setEntity] = useState(0);\r\n    const [callApi, setCallApi] = useState(false);\r\n    const [serialNum, setSerialNum] = useState(1);\r\n    const [loading,setLoading] = useState(false);\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const employeeTypeList = props.employeeTypeList[0];\r\n    const location = useLocation();\r\n    const { addToast } = useToasts();\r\n    const [menuList, setMenuList] = useState([]);\r\n\r\n    \r\n\r\n    \r\n      useEffect(()=>{\r\n        if(location.id != undefined){\r\n          localStorage.setItem('locationId', location.id);\r\n          setEmployeeName(location.name);\r\n        }\r\n      },[])\r\n \r\n    // const empId\r\n    // user select data per page\r\n    const dataSizeArr = [10,15,20,30,50,100,3000];\r\n    const dataSizeName = dataSizeArr.map(dsn=> ({label: dsn, value: dsn}));\r\n\r\n    const selectDataSize = value => {\r\n        setLoading(true);\r\n        setDataPerPage(value);\r\n        setCallApi((prev)=> !prev);\r\n    }\r\n\r\n    const employeeTypeName = employeeTypeList?.map(empt => ({label: empt.name, value: empt.id}));\r\n   \r\n\r\n    useEffect(()=>{\r\n        get(`MenuItem/Index`)\r\n        .then(res => {\r\n        \r\n            setMenuList(res);\r\n        })\r\n    },[])\r\n\r\n    // useEffect(()=>{\r\n       \r\n    //     const empId = localStorage.getItem('locationId');\r\n    //     const returnValue = get(`Employee/Index?page=${currentPage}&pagesize=${dataPerPage}&employeetypeid=${empId ? empId : employeeId}&searchstring=${searchStr}`).then((action)=>{\r\n    //         setEmployeeList(action.models);\r\n          \r\n    //         localStorage.removeItem('locationId');\r\n    //         setLoading(false)\r\n    //         setEntity(action.totalEntity);\r\n    //         setSerialNum(action.firstSerialNumber)\r\n    //     })\r\n    // },[callApi]);\r\n\r\n    const handleDeleteMenu = (menuId) => {\r\n   \r\n        remove(`MenuItem/Delete/${menuId}`)\r\n        .then(res => {\r\n        \r\n            addToast(res, {\r\n              appearance: res == 'Employee has been created successfully!' ? 'success': 'error',\r\n              // autoDismiss: true,\r\n            })\r\n            const newMenuList = menuList.filter(em => em.id != menuId);\r\n            setMenuList(newMenuList);\r\n          })\r\n\r\n    }\r\n\r\n \r\n \r\n\r\n    const selectEmployeeType = (label,value) => {\r\n        setEmployeeName(label);\r\n        setEmployeeId(value);\r\n        setCallApi((prev)=> !prev);\r\n    }\r\n\r\n    // search handler\r\n    const handleSearch = () => {\r\n        setCurrentPage(1);\r\n        setCallApi((prev)=> !prev);\r\n    }\r\n\r\n    // on enter press\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n          setCurrentPage(1);\r\n          setCallApi((prev)=>!prev);\r\n        }\r\n      }\r\n\r\n      //  on reset\r\n    const handleReset = () => {\r\n      setEmployeeName('Select Employee Type...');\r\n      setEmployeeId(0);\r\n      setSearchStr('');\r\n      setCurrentPage(1);\r\n      setCallApi((prev)=> !prev);\r\n    }\r\n\r\n\r\n    //  change page\r\n    // const paginate = (pageNumber) => {\r\n    //     setCurrentPage(pageNumber);\r\n    //     setCallApi((prev)=> !prev);\r\n    // };\r\n\r\n\r\n    // add staff handler\r\n    const handleAddStaff = () => {\r\n        history.push(\"/addMenu\");\r\n    }\r\n\r\n\r\n    // toggle dropdown\r\n    const toggle = () => {\r\n        setDropdownOpen((prev)=> !prev)\r\n      }\r\n\r\n\r\n    // employee click handler\r\n    const handleEmpClick = (id) => {\r\n      history.push({\r\n        pathname: '/employeeProfile',\r\n        id: id\r\n      })\r\n    }\r\n\r\n\r\n\r\n     // redirect to dashboard\r\n    const backToDashboard = () => {\r\n    history.push(\"/\")\r\n    }\r\n\r\n   \r\n    return (\r\n      <div>\r\n        <Card className=\"uapp-card-bg\">\r\n              <CardHeader className=\"page-header\">\r\n\r\n            <h3 className=\"text-white\">Menu List</h3>\r\n            <div className=\"page-header-back-to-home\" >\r\n              <span onClick={backToDashboard} className=\"text-white\"> <i className=\"fas fa-arrow-circle-left\"></i> Back to Dashboard</span>\r\n                  </div>\r\n              \r\n              </CardHeader>\r\n            </Card>\r\n\r\n       \r\n\r\n            <Card>\r\n\r\n                <CardBody>\r\n    \r\n                <Row className=\"mb-3\">\r\n                \r\n                  <Col lg=\"6\" md=\"5\" sm=\"6\" xs=\"4\">\r\n\r\n                    <ButtonForFunction\r\n                     func={handleAddStaff}\r\n                     className={\"btn btn-uapp-add \"}\r\n                     icon={<i className=\"fas fa-plus\"></i>}\r\n                     name={\" Add Menu\"}\r\n                     permission={6}\r\n                    />\r\n\r\n                  </Col>\r\n\r\n\r\n\r\n                </Row>\r\n             \r\n                {\r\n                    loading ?\r\n                    <h2 className=\"text-center\">Loading...</h2>\r\n                :\r\n                <div className=\"table-responsive\">\r\n                  <Table className=\"table-sm table-bordered\" >\r\n                    <thead className=\"thead-uapp-bg\">\r\n                    <tr style={{ textAlign: \"center\" }}>\r\n                        <th>SL/NO</th>\r\n                        <th>Title</th>\r\n                        <th>Icon</th>\r\n                        <th>Type</th>\r\n                        <th>Display Order</th>\r\n                       \r\n                        <th className=\"text-center\">Action</th>\r\n                     \r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                  {\r\n                      menuList?.map((men,i) => <tr key={men.id} style={{ textAlign: \"center\" }}>\r\n                        <th scope=\"row\">{serialNum+i}</th>\r\n                        <td>{men.title}</td>\r\n                        <td>{men.icon}</td>\r\n                        <td>{men.type}</td>\r\n                        <td>{men.displayOrder}</td>\r\n                        \r\n                        <td className=\"text-center\">\r\n                          <ButtonGroup variant=\"text\">\r\n                            {/* <Button  color=\"danger\" onClick={()=>handleDeleteMenu(men.id)}  className=\"mr-2 btn-sm\"><i className=\"fas fa-trash-alt\"></i></Button> */}\r\n\r\n                            <ButtonForFunction\r\n                                color={\"danger\"}\r\n                                func={()=>handleDeleteMenu(men.id)}\r\n                                className={\"mr-2 btn-sm\"}\r\n                                icon={<i className=\"fas fa-trash-alt\"></i>}\r\n                                permission={6}\r\n                            />\r\n\r\n                          {/* <Link to={`/employeeGeneralInfo/`}>\r\n                           <Button color=\"warning\"  className=\" btn-sm\"> <i className=\"fas fa-edit\"></i> </Button>\r\n                              </Link> */}\r\n\r\n                             <LinkButton\r\n                               url ={'/employeeGeneralInfo/'}\r\n                               color={\"warning\"}\r\n                               className={\" btn-sm\"}\r\n                               icon={<i className=\"fas fa-edit\"></i>}\r\n                               >\r\n                             </LinkButton>\r\n\r\n                          </ButtonGroup>\r\n                        </td>\r\n                        \r\n                      </tr>)\r\n\r\n                  }\r\n              \r\n\r\n                   </tbody>\r\n                  </Table>\r\n                </div>\r\n                }\r\n\r\n                  {/* <Pagination dataPerPage={dataPerPage} totalData={entity} paginate={paginate} currentPage={currentPage} /> */}\r\n\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  employeeTypeList: state.employeeTypeDataReducer.employeeType\r\n})\r\nexport default connect(mapStateToProps)(EmployeeList);\r\n\r\n"],"sourceRoot":""}