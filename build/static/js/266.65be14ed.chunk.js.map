{"version":3,"sources":["views/SMS/Pagination/Pagination.jsx","views/SMS/InFlow/Index.js"],"names":["Pagination","PageIndex","TotalPages","PreviousPage","NextPage","dataPerPage","totalData","paginate","currentPage","totalpages","Math","ceil","startpage","endpage","pageNumbers","i","push","md","className","style","cursor","onClick","map","number","key","textAlign","marginTop","paddingRight","Index","history","useHistory","userType","localStorage","getItem","useState","success","data","setData","consultant","setConsultant","consultantLabel","setConsultantLabel","consultantValue","setConsultantValue","setCurrentPage","setCallApi","setDataPerPage","entity","setEntity","dropdownOpen","setDropdownOpen","dataSizeName","dsn","label","value","dropdownOpen1","setDropdownOpen1","handleExportXLSX","wb","XLSX","book_new","ws","json_to_sheet","book_append_sheet","componentRef","useRef","useEffect","get","then","res","console","log","totalEntity","models","consultantOptions","con","name","id","lg","sm","xs","userTypes","Consultant","options","onChange","opt","prev","float","isOpen","toggle","caret","trigger","content","current","ls","transactionDate","transactionCode","amount","transactionType","transactionNote","variant","color","window","open","redirect","redirectForEdit","pageNumber"],"mappings":"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","file":"static/js/266.65be14ed.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Row,Col} from 'reactstrap'\r\nconst Pagination = ({ dataPerPage, totalData, paginate, currentPage }) => {\r\n\r\n    let PageIndex = 0;\r\n    let PageSize = 0;\r\n    let TotalCount = 0;\r\n    let TotalPages = 0;\r\n    let PreviousPage = 0;\r\n    let NextPage = 0;\r\n  \r\n    const totalpages = Math.ceil(totalData / dataPerPage);\r\n    let startpage = currentPage - 5;\r\n    let endpage = currentPage + 4;\r\n    if (startpage <= 0) {\r\n        endpage = endpage - (startpage - 1);\r\n        startpage = 1;\r\n    }\r\n    if (endpage > totalpages) {\r\n        endpage = totalpages;\r\n        if (endpage > 10) {\r\n            startpage = endpage - 9;\r\n        }\r\n    }\r\n    TotalCount = totalData;\r\n    PageIndex = currentPage;\r\n    PageSize = dataPerPage;\r\n    TotalPages = totalpages;\r\n    PreviousPage = startpage;\r\n    NextPage = endpage;\r\n\r\n\r\n    // const prev = currentPage > 1 ? (currentPage - 1) : 1;\r\n    // const last = Math.ceil(totalData / dataPerPage);\r\n    //     for (let i = 1; i <= Math.ceil(totalData/dataPerPage); i++) {\r\n\r\n    //         pageNumbers.push(i)\r\n    //     }\r\n\r\n    // let newPageNumbers;\r\n\r\n    // if(pageNumbers.length>10){\r\n    //  newPageNumbers = pageNumbers.slice(0,10)\r\n    // }\r\n    const pageNumbers = [];\r\n    const last = NextPage;\r\n    const next = (last === currentPage) ? currentPage : currentPage + 1;\r\n\r\n    const prev = PreviousPage;\r\n    \r\n    for (let i = PreviousPage; i <= NextPage; i++){\r\n        pageNumbers.push(i)\r\n    }\r\n\r\n        return (\r\n         <Row>\r\n             <Col md=\"6\">\r\n             <nav className=\"page navigation uapp-pagination\">\r\n                <ul className=\"pagination ml-2\">\r\n\r\n                    {\r\n                        PageIndex > 1 &&\r\n                        <>\r\n                  <li className=\"pagination-item pagination-First\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(1)} className=\"page-link\">\r\n                            First\r\n                        </p>\r\n                    </li>\r\n\r\n                    <li className=\"pagination-item\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(PageIndex - 1)} className=\"page-link\">\r\n                      <i className=\"fas fa-chevron-left\"></i>\r\n                        </p>\r\n                    </li>\r\n                        </>\r\n                    }\r\n\r\n                    \r\n\r\n                    {\r\n\r\n                        pageNumbers.map(number =>\r\n\r\n                            PageIndex==number ?\r\n                            <li key={number} className=\"pagination-item \">\r\n                                <p style={{ cursor: 'pointer' }} onClick={() => paginate(number)} className=\"page-link page-active\">\r\n                                    {number}\r\n                                </p>\r\n                            </li>\r\n                            :\r\n                            <li key={number} className=\"pagination-item\">\r\n                            <p style={{ cursor: 'pointer' }} onClick={() => paginate(number)} className=\"page-link\">\r\n                                {number}\r\n                            </p>\r\n                        </li>\r\n\r\n                        )\r\n                    }\r\n                    {\r\n                        PageIndex < TotalPages &&\r\n                        <>\r\n                        <li className=\"pagination-item\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(PageIndex + 1)} className=\"page-link\">\r\n                      <i className=\"fas fa-chevron-right\"></i>\r\n                        </p>\r\n                    </li>\r\n                  <li className=\"pagination-item pagination-Last\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(TotalPages)} className=\"page-link\">\r\n                            Last\r\n                        </p>\r\n                    </li>\r\n                        </>\r\n                    }\r\n                </ul>\r\n            </nav>\r\n             </Col>\r\n\r\n             <Col md=\"6\" style={{textAlign: 'right', marginTop: '1.5%', paddingRight: '2.5%'}}>\r\n                 <h5>Total Results Found: {totalData}</h5>\r\n             </Col>\r\n         </Row>\r\n        )\r\n}\r\n\r\nexport default Pagination","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardBody, CardHeader, CardTitle,  Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, FormText, Col, Row, InputGroup, Table, TabContent, TabPane, Nav,NavLink, NavItem, UncontrolledTooltip, ButtonGroup, Dropdown, DropdownToggle, DropdownMenu } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport get from '../../../helpers/get';\r\nimport { userTypes } from '../../../constants/userTypeConstant';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport ReactToPrint from \"react-to-print\";\r\nimport * as XLSX from \"xlsx/xlsx.mjs\";\r\n\r\nconst Index = () => {\r\n\r\n    const history = useHistory();\r\n    const userType = localStorage.getItem(\"userType\");\r\n    const [success,setSuccess] = useState(false);\r\n\r\n    const [data,setData] = useState([]);\r\n\r\n    const [consultant,setConsultant] = useState([]);\r\n    const [consultantLabel,setConsultantLabel] = useState('Select Consultant');\r\n    const[consultantValue,setConsultantValue] = useState(0);\r\n\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [callApi, setCallApi] = useState(false);\r\n    const [dataPerPage, setDataPerPage] = useState(15);\r\n    const [entity, setEntity] = useState(0);\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n     // user select data per page\r\n     const dataSizeArr = [10, 15, 20, 30, 50, 100, 1000];\r\n     const dataSizeName = dataSizeArr.map((dsn) => ({ label: dsn, value: dsn }));\r\n     const [orderLabel, setOrderLabel] = useState(\"Select order by\");\r\n     const [orderValue, setOrderValue] = useState(0);\r\n     const [dropdownOpen1, setDropdownOpen1] = useState(false);\r\n \r\n     const selectDataSize = (value) => {\r\n       \r\n       setDataPerPage(value);\r\n       setCallApi((prev) => !prev);\r\n     };\r\n\r\n       // search handler\r\n       const handleSearch = () => {\r\n        setCurrentPage(1);\r\n        setCallApi((prev) => !prev);\r\n      };\r\n\r\n     const paginate = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n        setCallApi((prev) => !prev);\r\n      };\r\n\r\n      const handleExportXLSX = () => {\r\n        var wb = XLSX.utils.book_new(),\r\n          ws = XLSX.utils.json_to_sheet(data);\r\n        XLSX.utils.book_append_sheet(wb, ws, \"MySheet1\");\r\n    \r\n        XLSX.writeFile(wb, \"MyExcel.xlsx\");\r\n      };\r\n\r\n      const handleKeyDown = (event) => {\r\n        if (event.key === \"Enter\") {\r\n          setCurrentPage(1);\r\n          setCallApi((prev) => !prev);\r\n        }\r\n      };\r\n\r\n      const toggle = () => {\r\n        setDropdownOpen((prev) => !prev);\r\n      };\r\n\r\n      // toggle1 dropdown\r\n  const toggle1 = () => {\r\n    setDropdownOpen1((prev) => !prev);\r\n  };\r\n\r\n \r\n\r\n      const componentRef = useRef();\r\n\r\n    useEffect(()=>{\r\n        get(`ConsultantDD/index`)\r\n        .then(res =>{\r\n        setConsultant(res);\r\n        })\r\n\r\n        get(`BonusTransaction/Index?page=${currentPage}&pagesize=${dataPerPage}&consultantid=${consultantValue}`)\r\n        .then(res => {\r\n            console.log(res);\r\n            setEntity(res?.totalEntity);\r\n            setData(res?.models);\r\n        })\r\n\r\n    },[success, currentPage, dataPerPage, consultantValue])\r\n\r\n\r\n    const backToDashboard = () =>{\r\n        history.push('/');\r\n\r\n    }\r\n\r\n    const consultantOptions = consultant?.map(con => ({\r\n        label: con?.name,\r\n        value: con?.id\r\n    }))\r\n\r\n    const selectConsultant = (label,value) => {\r\n        setConsultantLabel(label);\r\n        setConsultantValue(value);\r\n    }\r\n\r\n    const redirect = (data) => {\r\n      window.open(`/inFlow/details/${data?.id}`,'_blank')\r\n    }\r\n\r\n    const redirectForEdit = (data) => {\r\n      history.push(`/inFlow/Update/${data?.id}`);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Card className=\"uapp-card-bg\">\r\n              <CardHeader className=\"page-header\">\r\n                <h3 className=\"text-white\">Inflow Transaction List</h3>\r\n                <div className=\"page-header-back-to-home\">\r\n                  <span className=\"text-white\" onClick={backToDashboard}>\r\n                    {\" \"}\r\n                    <i className=\"fas fa-arrow-circle-left\"></i> Back to Dashboard\r\n                  </span>\r\n                </div>\r\n              </CardHeader>\r\n            </Card>\r\n\r\n            <Card className='uapp-employee-search'>\r\n                <CardBody>\r\n\r\n                   \r\n\r\n                    <Row className=\"mb-4\">\r\n            <Col lg=\"5\" md=\"5\" sm=\"4\" xs=\"4\">\r\n              \r\n            {\r\n                                    (userType !== userTypes?.Consultant) ?\r\n\r\n                                    \r\n                                   \r\n                                    <Select\r\n                                    // styles={customStyles2}\r\n                                    options={consultantOptions}\r\n                                    value={{ label: consultantLabel, value: consultantValue }}\r\n                                    onChange={(opt) => selectConsultant(opt.label, opt.value)}\r\n                                    />\r\n\r\n\r\n                                  \r\n\r\n                                    :\r\n\r\n                                    null\r\n                                }\r\n\r\n            </Col>\r\n\r\n            <Col lg=\"7\" md=\"7\" sm=\"8\" xs=\"8\">\r\n              <div className=\"d-flex justify-content-end flex-wrap\">\r\n               \r\n                \r\n                <div className=\"mr-3\">\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <div className=\"mr-2\">Showing :</div>\r\n                    <div>\r\n                      <Select\r\n                        options={dataSizeName}\r\n                        value={{ label: dataPerPage, value: dataPerPage }}\r\n                        onChange={(opt) => selectDataSize(opt.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"mr-3\">\r\n                  <Dropdown\r\n                    className=\"uapp-dropdown\"\r\n                    style={{ float: \"right\" }}\r\n                    isOpen={dropdownOpen}\r\n                    toggle={toggle}\r\n                  >\r\n                    <DropdownToggle caret>\r\n                      <i className=\"fas fa-print fs-7\"></i>\r\n                    </DropdownToggle>\r\n                    <DropdownMenu className=\"bg-dd\">\r\n                      <div className=\"d-flex justify-content-around align-items-center mt-2\">\r\n                        <div className=\"text-white cursor-pointer\">\r\n                          <p onClick={handleExportXLSX}>\r\n                            <i className=\"fas fa-file-excel\"></i>\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"text-white cursor-pointer\">\r\n                          <ReactToPrint\r\n                            trigger={() => (\r\n                              <p>\r\n                                <i className=\"fas fa-file-pdf\"></i>\r\n                              </p>\r\n                            )}\r\n                            content={() => componentRef.current}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </DropdownMenu>\r\n                  </Dropdown>\r\n                </div>\r\n\r\n                <div className=\"me-3\">\r\n                  <Dropdown\r\n                    className=\"uapp-dropdown\"\r\n                    style={{ float: \"right\" }}\r\n                    isOpen={dropdownOpen1}\r\n                    toggle={toggle1}\r\n                  >\r\n                    <DropdownToggle caret>\r\n                      <i className=\"fas fa-bars\"></i>\r\n                    </DropdownToggle>\r\n                    <DropdownMenu className=\"bg-dd\">\r\n                      <div className=\"d-flex justify-content-around align-items-center mt-2\">\r\n                        <div className=\"text-white cursor-pointer\">\r\n                          <p onClick={handleExportXLSX}>\r\n                            <i className=\"fas fa-file-excel\"></i>\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"text-white cursor-pointer\">\r\n                          <ReactToPrint\r\n                            trigger={() => (\r\n                              <p>\r\n                                <i className=\"fas fa-file-pdf\"></i>\r\n                              </p>\r\n                            )}\r\n                            content={() => componentRef.current}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </DropdownMenu>\r\n                  </Dropdown>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n                <Table className=\"table-sm table-bordered\">\r\n                    <thead className=\"thead-uapp-bg\">\r\n                    <tr style={{ textAlign: \"center\" }}>\r\n                    \r\n                    <th>SL/NO</th>\r\n                    <th>Transaction Date</th>\r\n                     <th>Consultant Name</th>\r\n                     <th>Transaction Code</th>\r\n                     <th>Amount</th>\r\n                     <th>Transaction Type</th>\r\n                     <th>Transaction Note</th>\r\n                     <th>Action</th>\r\n                     \r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {data.map((ls, i) => (\r\n                    <tr key={i} style={{ textAlign: \"center\" }}>\r\n                    \r\n                      \r\n                      <td>\r\n                        {i+1}\r\n                      </td>\r\n                      <td>\r\n                        {ls?.transactionDate}\r\n                      </td>\r\n                      <td>\r\n                        {ls?.consultant}\r\n                      </td>\r\n                      <td>\r\n                        {ls?.transactionCode}\r\n                      </td>\r\n\r\n                      <td>\r\n                        {ls?.amount}\r\n                      </td>\r\n                      <td>\r\n                        {ls?.transactionType}\r\n                      </td>\r\n                      <td>{ls?.transactionNote}</td>\r\n                     \r\n                     \r\n                     \r\n                      <td className=\"text-center\">\r\n                        <ButtonGroup variant=\"text\">\r\n                       \r\n\r\n                        \r\n                            <Button className='mr-1 btn-sm' color='primary' onClick={()=>redirect(ls)}>\r\n                            <i className=\"fas fa-eye\"></i>\r\n                            </Button>\r\n                            \r\n\r\n                            <Button color='warning' className='ml-1 btn-sm' onClick={()=>redirectForEdit(ls)}>\r\n                              <i className='fas fa-edit'></i>\r\n\r\n                            </Button>\r\n                          \r\n\r\n\r\n                        </ButtonGroup>\r\n\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n\r\n           \r\n                    \r\n                    </tbody>\r\n                    </Table>\r\n\r\n                    <Pagination\r\n                    dataPerPage={dataPerPage}\r\n                    totalData={entity}\r\n                    paginate={paginate}\r\n                    currentPage={currentPage}\r\n                     />\r\n                </CardBody>\r\n            </Card>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Index;"],"sourceRoot":""}