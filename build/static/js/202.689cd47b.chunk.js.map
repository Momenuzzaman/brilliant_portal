{"version":3,"sources":["views/SMS/Components/ButtonForFunction.js","helpers/put.js","helpers/post.js","views/SMS/Configuration/Employees/EmployeeType.jsx"],"names":["ButtonForFunction","className","icon","color","type","permission","func","url","name","disable","onClick","disabled","AuthStr","localStorage","getItem","body","Axios","put","rootUrl","headers","res","response","status","history","push","axios","post","connect","state","EmployeesTypeList","employeeTypeDataReducer","employeeType","props","myForm","createRef","useState","success","setSuccess","modalOpen","setModalOpen","employeesTypeName","setemployeesTypeName","selected","setSelected","addToast","useToasts","dispatch","useDispatch","useHistory","useEffect","get","then","data","StoreEmployeeTypeData","isOpen","toggle","ref","onSubmit","event","preventDefault","subdata","Name","action","message","appearance","autoDismiss","id","hidden","row","md","value","placeholder","onChange","e","v","target","required","style","display","justifyContent","removeItem","subData","Id","Ripple","map","etype","i","key","scope","employeeCount"],"mappings":"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","file":"static/js/202.689cd47b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n   \r\n    Button,\r\n  \r\n  } from \"reactstrap\";\r\n\r\nconst ButtonForFunction = ({className, icon,color, permission, type,url, func, name,disable}) => {\r\n    // const {className, icon} = props;\r\n\r\n \r\n\r\n\r\n    const data = [1,2,3,4,6];\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n          {/* {\r\n            data.includes(permission) ?  */}\r\n            <Button\r\n               onClick={func}\r\n               color={color}\r\n               type={type}\r\n               className={className}\r\n               disabled={disable}\r\n             >\r\n               {\" \"}\r\n               {icon}{name}{\" \"}\r\n            </Button>\r\n            {/* :\r\n            null\r\n          }    */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ButtonForFunction;","import Axios from \"axios\";\r\n\r\nimport history from \"./history\";\r\nimport { rootUrl } from \"../constants/constants\";\r\n\r\nconst AuthStr = localStorage.getItem(\"token\");\r\nasync function put(url, body = {}, authToken = \"\") {\r\n  try {\r\n    const res = await Axios.put(`${rootUrl}${url}`, body, {\r\n      headers: {\r\n        \"authorization\": AuthStr,\r\n      },\r\n    });\r\n    return await res;\r\n  } catch (error) {\r\n    if (error.response.status === 404) {\r\n      history.push(\"/404\");\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default put;\r\n","import axios from \"axios\";\r\n\r\nimport history from \"./history\";\r\nimport { rootUrl } from \"../constants/constants\";\r\n\r\nconst AuthStr = localStorage.getItem(\"token\");\r\n\r\nasync function post(url, body = {}, authToken = \"\") {\r\n  try {\r\n    const res = await axios.post(`${rootUrl}${url}`, body, {\r\n      headers: {\r\n        'authorization': AuthStr,\r\n      },\r\n    });\r\n    return await res;\r\n  } catch (error) {\r\n    if (error?.response?.status === 404) {\r\n      history.push(\"/404\");\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default post;\r\n","import React, { createRef, useEffect, useState } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { Table } from 'reactstrap';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, FormText, Col, Row, Card, CardHeader, CardTitle, CardBody, } from 'reactstrap';\r\nimport { User } from \"react-feather\"\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { StoreEmployeeTypeData } from '../../../../redux/actions/SMS/Employees/EmployeesTypeAction'\r\nimport { useHistory } from 'react-router';\r\nimport get from '../../../../helpers/get';\r\n\r\nimport post from '../../../../helpers/post';\r\nimport remove from '../../../../helpers/remove';\r\nimport put from '../../../../helpers/put';\r\nimport ButtonForFunction from '../../Components/ButtonForFunction';\r\nconst EmployeeType = (props) => {\r\n\r\n  const myForm = createRef();\r\n  const [success, setSuccess] = useState(false);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [employeesTypeName, setemployeesTypeName] = useState('');\r\n  const [selected, setSelected] = useState('');\r\n  const { addToast } = useToasts();\r\n  const dispatch = useDispatch();\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n  const EmployeesTypeList = props.EmployeesTypeList[0];\r\n  const history = useHistory();\r\n \r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false)\r\n    setSelected('');\r\n    setemployeesTypeName('')\r\n    localStorage.removeItem('updateemployeesType')\r\n  }\r\n\r\n  useEffect(() => {\r\n    const returnValue = get(`EmployeType/Index`).then((data) => {\r\n     \r\n      dispatch(StoreEmployeeTypeData(data))\r\n    })\r\n  }, [dispatch])\r\n\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const subdata = {\r\n      Name: employeesTypeName\r\n    }\r\n\r\n\r\n    const returnValue = post(`EmployeType/Create`, subdata).then((action) => {\r\n      setSuccess(!success)\r\n      setModalOpen(false)\r\n      \r\n     \r\n      addToast(action?.data?.message, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n      setemployeesTypeName('')\r\n      setSelected('')\r\n      get(`EmployeType/Index`).then((data) => {\r\n     \r\n        dispatch(StoreEmployeeTypeData(data))\r\n      })\r\n    });\r\n  }\r\n\r\n\r\n  const handleUpdate = (p) => {\r\n    setModalOpen(true)\r\n    setSelected(p.name)\r\n    localStorage.setItem('updateemployeesType', p.id)\r\n  }\r\n\r\n  const changingemployeesType = (v) => {\r\n    setemployeesTypeName(v)\r\n    setSelected(v)\r\n  }\r\n  const toggleDanger = (p) => {\r\n    localStorage.setItem('employeesTypeId', p.id)\r\n    localStorage.setItem('employeesTypeName', p.name)\r\n    setDeleteModal(true)\r\n  }\r\n\r\n  const handleDeletePermission = (id) => {\r\n \r\n    const returnValue = remove(`EmployeType/Delete/${id}`).then((action) => {\r\n      setDeleteModal(false);\r\n      setSuccess(!success);\r\n     \r\n      \r\n        addToast(action, {\r\n          appearance:  'error',\r\n          autoDismiss: true,\r\n        })\r\n        localStorage.removeItem('employeesTypeId')\r\n        localStorage.removeItem('employeesTypeName')\r\n        get(`EmployeType/Index`).then((data) => {\r\n     \r\n          dispatch(StoreEmployeeTypeData(data))\r\n        })\r\n\r\n       \r\n    })\r\n  }\r\n\r\n  const handleUpdateSubmit = () => {\r\n\r\n    const id = localStorage.getItem('updateemployeesType');\r\n\r\n    const subData = {\r\n      Name: selected,\r\n      Id: id\r\n    }\r\n\r\n    const returnvalue = put(`EmployeType/Update`, subData).then((action) => {\r\n      setSuccess(!success)\r\n      setModalOpen(false)\r\n    \r\n      if(action?.status == 200){\r\n        addToast(action?.data?.message, {\r\n          appearance:  'success',\r\n          autoDismiss: true\r\n        })\r\n        setSelected('')\r\n        localStorage.removeItem('updateemployeesType')\r\n        get(`EmployeType/Index`).then((data) => {\r\n       \r\n          dispatch(StoreEmployeeTypeData(data))\r\n        })\r\n      }\r\n      \r\n    })\r\n  }\r\n\r\n  // employee count click\r\n  const handleEmpCount = (id) => {\r\n    history.push(`/employeeList/${id}`)\r\n  }\r\n  // redirect to dashboard\r\n  const backToDashboard = () => {\r\n    history.push(\"/\")\r\n  }\r\n\r\n  return (\r\n\r\n    <div>\r\n      <Card className='uapp-card-bg'>\r\n        <CardHeader className=\"page-header\">\r\n\r\n          <h3 className='text-light'>Employee Type </h3>\r\n          <div className=\"page-header-back-to-home\">\r\n            <span onClick={backToDashboard} className='text-light'> <i className=\"fas fa-arrow-circle-left\"></i> Back to Dashboard</span>\r\n          </div>\r\n\r\n        </CardHeader>\r\n      </Card>\r\n\r\n\r\n      <Card>\r\n        <CardHeader>\r\n        \r\n          \r\n          {/* <ButtonForFunction\r\n            color={\"success\"}\r\n            func={() => setModalOpen(true)}\r\n            name={\"Add Employee Type\"}\r\n            permission={6}\r\n          /> */}\r\n\r\n        </CardHeader>\r\n        <CardBody>\r\n\r\n          <Modal isOpen={modalOpen} toggle={() => setModalOpen(!modalOpen)} className=\"uapp-modal\">\r\n            <ModalHeader>Add Employees Type</ModalHeader>\r\n            <ModalBody>\r\n              <Form ref={myForm} onSubmit={handleSubmit}>\r\n\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"Id\"\r\n                  id=\"Id\"\r\n                  hidden\r\n                />\r\n\r\n                <FormGroup row className=\"has-icon-left position-relative\">\r\n                  <Col md=\"4\">\r\n                    <span>Add Employees Type</span>\r\n                  </Col>\r\n                  <Col md=\"8\">\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"Name\"\r\n                      id=\"Name\"\r\n                      value={selected}\r\n                      placeholder=\"Employees Type\"\r\n                      onChange={(e) => changingemployeesType(e.target.value)}\r\n                      required\r\n                    />\r\n                  </Col>\r\n                </FormGroup>\r\n\r\n                <FormGroup className=\"has-icon-left position-relative\" style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n\r\n                  <Button color=\"danger\" className=\"mr-1 mt-3\" onClick={() => closeModal()}>Close</Button>\r\n\r\n                  {\r\n                    localStorage.getItem(\"updateemployeesType\") ?\r\n                      <Button color=\"warning\" className=\"mr-1 mt-3\" onClick={handleUpdateSubmit}>Update</Button> :\r\n                      <Button.Ripple\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        className=\"mr-1 mt-3\"\r\n\r\n                      >\r\n                        Submit\r\n                      </Button.Ripple>\r\n\r\n                  }\r\n\r\n                </FormGroup>\r\n\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <th>SL/NO</th>\r\n                <th>Name</th>\r\n                <th className=\"text-center\"> Total Employee</th>\r\n                {/* <th>Action</th> */}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                EmployeesTypeList?.map((etype, i) => <tr key={etype.id}>\r\n                  <th scope=\"row\">{i + 1}</th>\r\n                  <td>{etype.name}</td>\r\n                  <td className=\"text-center\">\r\n                    <span onClick={()=>handleEmpCount(etype.id)} className=\"badge badge-pill badge-primary cursor-pointer\">  {etype.employeeCount} </span>\r\n                  </td>\r\n                  {/* <td> */}\r\n\r\n                    {/* <Button onClick={() => toggleDanger(etype)} color=\"danger\" className=\"mr-2 btn-sm\"><i className=\"fas fa-trash-alt\"></i></Button> */}\r\n\r\n                    {/* <ButtonForFunction\r\n                      func={() => toggleDanger(etype)}\r\n                      color={\"danger\"}\r\n                      className={\"mr-2 btn-sm\"}\r\n                      icon={<i className=\"fas fa-trash-alt\"></i>}\r\n                      permission={6}\r\n                    /> */}\r\n\r\n                    {/* <Button onClick={() => handleUpdate(etype)} color=\"warning\" className=\" btn-sm\"> <i className=\"fas fa-edit\"></i> </Button> */}\r\n\r\n                    {/* <ButtonForFunction\r\n                      func={() => handleUpdate(etype)}\r\n                      color={\"warning\"}\r\n                      className={\" btn-sm\"}\r\n                      icon={<i className=\"fas fa-edit\"></i>}\r\n                      permission={6}\r\n                    /> */}\r\n\r\n                    {/* <Modal isOpen={deleteModal} toggle={() => setDeleteModal(!deleteModal)} className=\"uapp-modal\">\r\n\r\n                      <ModalBody>\r\n                        <p>Are You Sure to Delete this {localStorage.getItem('employeesTypeName')} ? Once Deleted it can't be Undone!</p>\r\n                      </ModalBody>\r\n\r\n                      <ModalFooter>\r\n                        <Button onClick={() => handleDeletePermission(localStorage.getItem('employeesTypeId'))} color=\"danger\">YES</Button>\r\n                        <Button onClick={() => setDeleteModal(false)}>NO</Button>\r\n                      </ModalFooter>\r\n\r\n                    </Modal> */}\r\n                  {/* </td> */}\r\n                </tr>\r\n\r\n                )}\r\n\r\n\r\n            </tbody>\r\n          </Table>\r\n\r\n        </CardBody>\r\n      </Card>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n\r\n  EmployeesTypeList: state.employeeTypeDataReducer.employeeType,\r\n})\r\nexport default connect(mapStateToProps)(EmployeeType);\r\n"],"sourceRoot":""}