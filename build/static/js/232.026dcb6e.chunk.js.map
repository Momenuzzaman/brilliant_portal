{"version":3,"sources":["views/SMS/Components/ButtonForFunction.js","views/SMS/Pagination/Pagination.jsx","views/SMS/ApplicationTransaction/Index.js"],"names":["ButtonForFunction","className","icon","color","type","permission","func","url","name","disable","onClick","disabled","Pagination","PageIndex","TotalPages","PreviousPage","NextPage","dataPerPage","totalData","paginate","currentPage","totalpages","Math","ceil","startpage","endpage","pageNumbers","i","push","md","style","cursor","map","number","key","textAlign","marginTop","paddingRight","Index","userType","localStorage","getItem","history","useHistory","useState","uapp","setUapp","uappLabel","setUappLabel","uappValue","setUappValue","student","setStudent","studentLabel","setStudentLabel","studentValue","setStudentValue","consultant","setConsultant","consultantLabel","setConsultantLabel","consultantValue","setConsultantValue","intake","setIntake","intakeLabel","setIntakeLabel","intakeValue","setIntakeValue","data","setData","setCurrentPage","callApi","setCallApi","setDataPerPage","entity","dropdownOpen","setDropdownOpen","dataSizeName","dsn","label","value","dropdownOpen1","setDropdownOpen1","handleExportXLSX","wb","XLSX","book_new","ws","json_to_sheet","book_append_sheet","componentRef","useRef","useEffect","get","then","res","console","log","models","studentOptions","std","id","consultantOptions","con","intakeOptions","int","intakeName","uappOptions","options","onChange","opt","userTypes","Consultant","prev","float","isOpen","toggle","caret","trigger","content","current","ls","Id","Intake","Student","Unviersity","Subject","AccountIntake","Amount","RegistrationStatus","PaymentStatus","TransactionDate","TransactionStatus","width","variant","to","target","pageNumber"],"mappings":"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","file":"static/js/232.026dcb6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n   \r\n    Button,\r\n  \r\n  } from \"reactstrap\";\r\n\r\nconst ButtonForFunction = ({className, icon,color, permission, type,url, func, name,disable}) => {\r\n    // const {className, icon} = props;\r\n\r\n \r\n\r\n\r\n    const data = [1,2,3,4,6];\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n          {/* {\r\n            data.includes(permission) ?  */}\r\n            <Button\r\n               onClick={func}\r\n               color={color}\r\n               type={type}\r\n               className={className}\r\n               disabled={disable}\r\n             >\r\n               {\" \"}\r\n               {icon}{name}{\" \"}\r\n            </Button>\r\n            {/* :\r\n            null\r\n          }    */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ButtonForFunction;","import React from 'react'\r\nimport {Row,Col} from 'reactstrap'\r\nconst Pagination = ({ dataPerPage, totalData, paginate, currentPage }) => {\r\n\r\n    let PageIndex = 0;\r\n    let PageSize = 0;\r\n    let TotalCount = 0;\r\n    let TotalPages = 0;\r\n    let PreviousPage = 0;\r\n    let NextPage = 0;\r\n  \r\n    const totalpages = Math.ceil(totalData / dataPerPage);\r\n    let startpage = currentPage - 5;\r\n    let endpage = currentPage + 4;\r\n    if (startpage <= 0) {\r\n        endpage = endpage - (startpage - 1);\r\n        startpage = 1;\r\n    }\r\n    if (endpage > totalpages) {\r\n        endpage = totalpages;\r\n        if (endpage > 10) {\r\n            startpage = endpage - 9;\r\n        }\r\n    }\r\n    TotalCount = totalData;\r\n    PageIndex = currentPage;\r\n    PageSize = dataPerPage;\r\n    TotalPages = totalpages;\r\n    PreviousPage = startpage;\r\n    NextPage = endpage;\r\n\r\n\r\n    // const prev = currentPage > 1 ? (currentPage - 1) : 1;\r\n    // const last = Math.ceil(totalData / dataPerPage);\r\n    //     for (let i = 1; i <= Math.ceil(totalData/dataPerPage); i++) {\r\n\r\n    //         pageNumbers.push(i)\r\n    //     }\r\n\r\n    // let newPageNumbers;\r\n\r\n    // if(pageNumbers.length>10){\r\n    //  newPageNumbers = pageNumbers.slice(0,10)\r\n    // }\r\n    const pageNumbers = [];\r\n    const last = NextPage;\r\n    const next = (last === currentPage) ? currentPage : currentPage + 1;\r\n\r\n    const prev = PreviousPage;\r\n    \r\n    for (let i = PreviousPage; i <= NextPage; i++){\r\n        pageNumbers.push(i)\r\n    }\r\n\r\n        return (\r\n         <Row>\r\n             <Col md=\"6\">\r\n             <nav className=\"page navigation uapp-pagination\">\r\n                <ul className=\"pagination ml-2\">\r\n\r\n                    {\r\n                        PageIndex > 1 &&\r\n                        <>\r\n                  <li className=\"pagination-item pagination-First\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(1)} className=\"page-link\">\r\n                            First\r\n                        </p>\r\n                    </li>\r\n\r\n                    <li className=\"pagination-item\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(PageIndex - 1)} className=\"page-link\">\r\n                      <i className=\"fas fa-chevron-left\"></i>\r\n                        </p>\r\n                    </li>\r\n                        </>\r\n                    }\r\n\r\n                    \r\n\r\n                    {\r\n\r\n                        pageNumbers.map(number =>\r\n\r\n                            PageIndex==number ?\r\n                            <li key={number} className=\"pagination-item \">\r\n                                <p style={{ cursor: 'pointer' }} onClick={() => paginate(number)} className=\"page-link page-active\">\r\n                                    {number}\r\n                                </p>\r\n                            </li>\r\n                            :\r\n                            <li key={number} className=\"pagination-item\">\r\n                            <p style={{ cursor: 'pointer' }} onClick={() => paginate(number)} className=\"page-link\">\r\n                                {number}\r\n                            </p>\r\n                        </li>\r\n\r\n                        )\r\n                    }\r\n                    {\r\n                        PageIndex < TotalPages &&\r\n                        <>\r\n                        <li className=\"pagination-item\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(PageIndex + 1)} className=\"page-link\">\r\n                      <i className=\"fas fa-chevron-right\"></i>\r\n                        </p>\r\n                    </li>\r\n                  <li className=\"pagination-item pagination-Last\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(TotalPages)} className=\"page-link\">\r\n                            Last\r\n                        </p>\r\n                    </li>\r\n                        </>\r\n                    }\r\n                </ul>\r\n            </nav>\r\n             </Col>\r\n\r\n             <Col md=\"6\" style={{textAlign: 'right', marginTop: '1.5%', paddingRight: '2.5%'}}>\r\n                 <h5>Total Results Found: {totalData}</h5>\r\n             </Col>\r\n         </Row>\r\n        )\r\n}\r\n\r\nexport default Pagination","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Card, CardBody, CardHeader, CardTitle,  Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, FormText, Col, Row, InputGroup, Table, TabContent, TabPane, Nav,NavLink, NavItem, UncontrolledTooltip, ButtonGroup, Dropdown, DropdownToggle, DropdownMenu } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport get from '../../../helpers/get';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport ButtonForFunction from '../Components/ButtonForFunction';\r\nimport ReactToPrint from \"react-to-print\";\r\nimport * as XLSX from \"xlsx/xlsx.mjs\";\r\nimport { userTypes } from '../../../constants/userTypeConstant';\r\n\r\nconst Index = () => {\r\n\r\n    const userType = localStorage.getItem(\"userType\");\r\n    const history = useHistory();\r\n\r\n    const [uapp,setUapp] = useState([]);\r\n    const [uappLabel,setUappLabel] = useState('UAPP ID');\r\n    const[uappValue,setUappValue] = useState(0);\r\n\r\n    const [student,setStudent] = useState([]);\r\n    const [studentLabel,setStudentLabel] = useState('All Student');\r\n    const[studentValue,setStudentValue] = useState(0);\r\n\r\n    const [consultant,setConsultant] = useState([]);\r\n    const [consultantLabel,setConsultantLabel] = useState('All Consultant');\r\n    const[consultantValue,setConsultantValue] = useState(0);\r\n\r\n    const [intake,setIntake] = useState([]);\r\n    const [intakeLabel,setIntakeLabel] = useState('All Intake');\r\n    const[intakeValue,setIntakeValue] = useState(0);\r\n\r\n    const [data,setData] = useState([]);\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [callApi, setCallApi] = useState(false);\r\n    const [dataPerPage, setDataPerPage] = useState(15);\r\n    const [entity, setEntity] = useState(0);\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n     // user select data per page\r\n     const dataSizeArr = [10, 15, 20, 30, 50, 100, 1000];\r\n     const dataSizeName = dataSizeArr.map((dsn) => ({ label: dsn, value: dsn }));\r\n     const [orderLabel, setOrderLabel] = useState(\"Select order by\");\r\n     const [orderValue, setOrderValue] = useState(0);\r\n     const [dropdownOpen1, setDropdownOpen1] = useState(false);\r\n \r\n     const selectDataSize = (value) => {\r\n       \r\n       setDataPerPage(value);\r\n       setCallApi((prev) => !prev);\r\n     };\r\n\r\n       // search handler\r\n       const handleSearch = () => {\r\n        setCurrentPage(1);\r\n        setCallApi((prev) => !prev);\r\n      };\r\n\r\n     const paginate = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n        setCallApi((prev) => !prev);\r\n      };\r\n\r\n      const handleKeyDown = (event) => {\r\n        if (event.key === \"Enter\") {\r\n          setCurrentPage(1);\r\n          setCallApi((prev) => !prev);\r\n        }\r\n      };\r\n\r\n      const toggle = () => {\r\n        setDropdownOpen((prev) => !prev);\r\n      };\r\n\r\n      // toggle1 dropdown\r\n  const toggle1 = () => {\r\n    setDropdownOpen1((prev) => !prev);\r\n  };\r\n\r\n      const handleExportXLSX = () => {\r\n        var wb = XLSX.utils.book_new(),\r\n          ws = XLSX.utils.json_to_sheet(data);\r\n        XLSX.utils.book_append_sheet(wb, ws, \"MySheet1\");\r\n    \r\n        XLSX.writeFile(wb, \"MyExcel.xlsx\");\r\n      };\r\n\r\n      const componentRef = useRef();\r\n\r\n    useEffect(()=>{\r\n\r\n        get(`ConsultantDD/index`)\r\n        .then(res =>{\r\n            setConsultant(res);\r\n        })\r\n\r\n        get(`StudentDD/Index`)\r\n        .then(res =>{\r\n            setStudent(res);\r\n        })\r\n\r\n        get(`AccountIntake/index`)\r\n        .then(res => {\r\n            setIntake(res);\r\n        })\r\n\r\n        get(`UappIdDD/Index`)\r\n        .then(res =>{\r\n            setUapp(res);\r\n        })\r\n\r\n        get(`ApplicationTransaction/Index?page=${currentPage}&pagesize=${dataPerPage}&uappid=${uappValue}&studentid=${studentValue}&consultantid=${consultantValue}&intakeid=${intakeValue}`)\r\n        .then(res =>{\r\n            console.log(res);\r\n            setData(res?.models);\r\n        })\r\n\r\n    },[currentPage, dataPerPage, callApi, uappValue, intakeValue, studentValue, consultantValue])\r\n\r\n    const backToDashboard = () =>{\r\n        history.push('/');\r\n    }\r\n\r\n    const studentOptions = student?.map(std => ({\r\n        label: std?.name,\r\n        value: std?.id\r\n    }))\r\n\r\n    const selectStudent = (label,value) => {\r\n        setStudentLabel(label);\r\n        setStudentValue(value);\r\n    }\r\n\r\n    const consultantOptions = consultant?.map(con => ({\r\n        label: con?.name,\r\n        value: con?.id\r\n    }))\r\n\r\n    const selectConsultant = (label,value) => {\r\n        setConsultantLabel(label);\r\n        setConsultantValue(value);\r\n    }\r\n\r\n    const intakeOptions = intake?.map(int => ({\r\n        label: int?.intakeName,\r\n        value: int?.id\r\n    }))\r\n\r\n    const selectIntake = (label,value) => {\r\n        setIntakeLabel(label);\r\n        setIntakeValue(value);\r\n    }\r\n\r\n    const uappOptions = uapp?.map(int => ({\r\n        label: int?.intakeName,\r\n        value: int?.id\r\n    }))\r\n\r\n    const selectUapp = (label,value) => {\r\n        setUappLabel(label);\r\n        setUappValue(value);\r\n    }\r\n\r\n    const handleReset = () => {\r\n        setUappLabel('UAPP ID');\r\n        setUappValue(0);\r\n        setStudentLabel('All Student');\r\n        setStudentValue(0);\r\n        setConsultantLabel('All Consultant');\r\n        setConsultantValue(0);\r\n        setIntakeLabel('All Intake');\r\n        setIntakeValue(0);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Card className=\"uapp-card-bg\">\r\n              <CardHeader className=\"page-header\">\r\n                <h3 className=\"text-light\">Application Transaction List</h3>\r\n                <div className=\"page-header-back-to-home\">\r\n                  <span className=\"text-light\" onClick={backToDashboard}>\r\n                    {\" \"}\r\n                    <i className=\"fas fa-arrow-circle-left\"></i> Back to Dashboard\r\n                  </span>\r\n                </div>\r\n              </CardHeader>\r\n            </Card>\r\n\r\n            <Card>\r\n\r\n                <CardBody>\r\n\r\n               \r\n                        <div className='row'>\r\n                            <div className='col-md-12'>\r\n                               \r\n                               <div className='row'>\r\n\r\n                                <div className='col-md-3'>\r\n                                <Select\r\n                                options={uappOptions}\r\n                                // styles={customStyles2}\r\n                                value={{ label: uappLabel, value: uappValue }}\r\n                                onChange={(opt) => selectUapp(opt.label, opt.value)}\r\n                                />\r\n\r\n\r\n                                </div>\r\n\r\n                                <div className='col-md-3'>\r\n                                <Select\r\n                                // styles={customStyles2}\r\n                                options={studentOptions}\r\n                                value={{ label: studentLabel, value: studentValue }}\r\n                                onChange={(opt) => selectStudent(opt.label, opt.value)}\r\n                                />\r\n\r\n\r\n                                </div>\r\n                                {\r\n                                    (userType !== userTypes?.Consultant) ?\r\n\r\n                                    \r\n                                    <div className='col-md-3'>\r\n                                    <Select\r\n                                    // styles={customStyles2}\r\n                                    options={consultantOptions}\r\n                                    value={{ label: consultantLabel, value: consultantValue }}\r\n                                    onChange={(opt) => selectConsultant(opt.label, opt.value)}\r\n                                    />\r\n\r\n\r\n                                    </div>\r\n\r\n                                    :\r\n\r\n                                    null\r\n                                }\r\n                                \r\n                                <div className='col-md-3'>\r\n                                <Select\r\n                                // styles={customStyles2}\r\n                                options={intakeOptions}\r\n                                value={{ label: intakeLabel, value: intakeValue }}\r\n                                onChange={(opt) => selectIntake(opt.label, opt.value)}\r\n                                />\r\n\r\n\r\n                                </div>\r\n\r\n                               </div>\r\n\r\n                            </div>\r\n\r\n                           \r\n\r\n                        </div>\r\n\r\n                        <div className='row'>\r\n                        <div className='col-12 d-flex justify-content-end'>\r\n                        <div\r\n                        className=\"mt-1 mx-1 d-flex btn-clear\"\r\n                        onClick={handleReset}\r\n                      >\r\n                      \r\n                        <span className=\"text-danger\">\r\n                          <i className=\"fa fa-times\"></i> Clear\r\n                        </span>\r\n                      </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </CardBody>\r\n\r\n            </Card>\r\n\r\n            <Card className='uapp-employee-search'>\r\n                <CardBody>\r\n                <div className=\" row mb-3\">\r\n            <div className='col-lg-5 col-md-5 col-sm-4 col-xs-4'>\r\n              \r\n            </div>\r\n\r\n            <div className='col-lg-7 col-md-7 col-sm-8 col-xs-8'>\r\n              <div className=\"d-flex justify-content-end flex-wrap\">\r\n               \r\n                \r\n                <div className=\"me-3\">\r\n                  <div className=\"d-flex align-items-center\">\r\n                    <div className=\"me-2\">Showing :</div>\r\n                    <div>\r\n                      <Select\r\n                        options={dataSizeName}\r\n                        value={{ label: dataPerPage, value: dataPerPage }}\r\n                        onChange={(opt) => selectDataSize(opt.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"me-3\">\r\n                  <Dropdown\r\n                    className=\"uapp-dropdown\"\r\n                    style={{ float: \"right\" }}\r\n                    isOpen={dropdownOpen}\r\n                    toggle={toggle}\r\n                  >\r\n                    <DropdownToggle caret>\r\n                      <i className=\"fas fa-print fs-7\"></i>\r\n                    </DropdownToggle>\r\n                    <DropdownMenu className=\"bg-dd\">\r\n                      <div className=\"d-flex justify-content-around align-items-center mt-2\">\r\n                        <div className=\"text-light cursor-pointer\">\r\n                          <p onClick={handleExportXLSX}>\r\n                            <i className=\"fas fa-file-excel\"></i>\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"text-light cursor-pointer\">\r\n                          <ReactToPrint\r\n                            trigger={() => (\r\n                              <p>\r\n                                <i className=\"fas fa-file-pdf\"></i>\r\n                              </p>\r\n                            )}\r\n                            content={() => componentRef.current}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </DropdownMenu>\r\n                  </Dropdown>\r\n                </div>\r\n\r\n                <div className=\"me-3\">\r\n                  <Dropdown\r\n                    className=\"uapp-dropdown\"\r\n                    style={{ float: \"right\" }}\r\n                    isOpen={dropdownOpen1}\r\n                    toggle={toggle1}\r\n                  >\r\n                    <DropdownToggle caret>\r\n                      <i className=\"fas fa-bars\"></i>\r\n                    </DropdownToggle>\r\n                    <DropdownMenu className=\"bg-dd\">\r\n                      <div className=\"d-flex justify-content-around align-items-center mt-2\">\r\n                        <div className=\"text-light cursor-pointer\">\r\n                          <p onClick={handleExportXLSX}>\r\n                            <i className=\"fas fa-file-excel\"></i>\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"text-light cursor-pointer\">\r\n                          <ReactToPrint\r\n                            trigger={() => (\r\n                              <p>\r\n                                <i className=\"fas fa-file-pdf\"></i>\r\n                              </p>\r\n                            )}\r\n                            content={() => componentRef.current}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </DropdownMenu>\r\n                  </Dropdown>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n                <Table className=\"table-sm table-bordered\">\r\n                    <thead className=\"thead-uapp-bg\">\r\n                    <tr style={{ textAlign: \"center\" }}>\r\n                    \r\n                    <th>SL/NO</th>\r\n                     <th>ID</th>\r\n                     <th>Intake</th>\r\n                     <th>Consultant</th>\r\n                     <th>Student</th>\r\n                     <th>University</th>\r\n                     <th>Subject</th>\r\n                     <th>Intake Range</th>\r\n                     <th>Amount</th>\r\n                     <th>Reg. Status</th>\r\n                     <th>Payment Status</th>\r\n                     <th>Transaction Date</th>\r\n                     <th>Status</th>\r\n                     <th>Action</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {data?.map((ls, i) => (\r\n                    <tr key={i} style={{ textAlign: \"center\" }}>\r\n                    \r\n                      <td>\r\n                        {i+1}\r\n                      </td>\r\n                      <td>\r\n                        {ls?.Id}\r\n                      </td>\r\n                      <td>\r\n                        {ls?.Intake}\r\n                      </td>\r\n                      <td>\r\n                        {ls?.Consultant}\r\n                      </td>\r\n                      <td>{ls?.Student}</td>\r\n                      <td>{ls?.Unviersity}</td>\r\n                      <td>{ls?.Subject}</td>\r\n                      <td>{ls?.AccountIntake}</td>\r\n                      <td>{ls?.Amount}</td>\r\n                      <td> {ls?.RegistrationStatus}</td>\r\n                      <td>{ls?.PaymentStatus}</td>\r\n                      <td>{ls?.TransactionDate}</td>\r\n                      <td>{ls?.TransactionStatus}</td>\r\n                     \r\n                     \r\n                     \r\n                      <td style={{ width: \"15%\" }} className=\"text-center\">\r\n                        <ButtonGroup variant=\"text\">\r\n                       \r\n\r\n\r\n                            <Button className='me-1 btn-sm' color='primary'>\r\n                            <Link to='/' target='_black'><i className=\"fas fa-eye\"></i></Link>\r\n                            </Button>\r\n\r\n                          \r\n\r\n\r\n                        </ButtonGroup>\r\n\r\n                     \r\n                       \r\n\r\n\r\n\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n\r\n           \r\n                    \r\n                    </tbody>\r\n                    </Table>\r\n\r\n                    <Pagination\r\n                    dataPerPage={dataPerPage}\r\n                    totalData={entity}\r\n                    paginate={paginate}\r\n                    currentPage={currentPage}\r\n                     />\r\n                </CardBody>\r\n            </Card>\r\n\r\n\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Index;"],"sourceRoot":""}