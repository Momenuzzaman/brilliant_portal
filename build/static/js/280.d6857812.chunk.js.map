{"version":3,"sources":["helpers/post.js","views/SMS/Configuration/Menu/RoleMenu.jsx"],"names":["AuthStr","localStorage","getItem","url","body","axios","post","rootUrl","headers","res","response","status","history","push","connect","state","roleList","roleDataReducer","roles","props","myForm","createRef","useState","modalOpen","setModalOpen","rolelabel","setRoleLabel","roleValue","setRoleValue","menus","setMenus","checked","setChecked","addToast","useToasts","useHistory","permissions","JSON","parse","setRoles","useEffect","get","then","console","log","roleName","map","role","label","name","value","id","className","onClick","onSubmit","event","preventDefault","ref","row","sm","md","lg","options","onChange","opt","action","defaultChecked","length","i","menu","isChecked","toString","e","newChecked","val","target","menuId","document","getElementById","handleSelectAll","type","htmlFor","xs","key","includes","index","indexOf","splice","handleCheck","menuItem","style","display","justifyContent","permissionList","Asign_Menu","Ripple","isOpen","toggle","color","subData","FormData","append","data","message","appearance","autoDismiss"],"mappings":"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","file":"static/js/280.d6857812.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nimport history from \"./history\";\r\nimport { rootUrl } from \"../constants/constants\";\r\n\r\nconst AuthStr = localStorage.getItem(\"token\");\r\n\r\nasync function post(url, body = {}, authToken = \"\") {\r\n  try {\r\n    const res = await axios.post(`${rootUrl}${url}`, body, {\r\n      headers: {\r\n        'authorization': AuthStr,\r\n      },\r\n    });\r\n    return await res;\r\n  } catch (error) {\r\n    if (error?.response?.status === 404) {\r\n      history.push(\"/404\");\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default post;\r\n","import React, { createRef, useState } from 'react'\r\nimport { connect  } from 'react-redux'\r\nimport { useHistory } from 'react-router';\r\nimport Select from 'react-select';\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { Button, Modal,  ModalBody,  Form, FormGroup,    Col, Row, Card, CardHeader,  CardBody,  } from 'reactstrap';\r\nimport get from '../../../../helpers/get';\r\nimport post from '../../../../helpers/post';\r\nimport { permissionList } from '../../../../constants/AuthorizationConstant';\r\nimport { useEffect } from 'react';\r\n\r\n\r\nconst RoleMenu = (props) => {\r\n\r\n    const myForm = createRef();\r\n    \r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [rolelabel, setRoleLabel] = useState('Select Role...');\r\n    const [roleValue, setRoleValue] = useState('');\r\n    const [menus, setMenus] = useState([]);\r\n    const [confirm, setConfirm] = useState(false);\r\n    let [checked, setChecked] = useState([]);\r\n    const { addToast } = useToasts();\r\n    const history = useHistory();\r\n    const permissions = JSON.parse(localStorage.getItem('permissions'));\r\n    const [roles,setRoles] = useState([]);\r\n\r\n\r\n  // submitting form\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault(); \r\n    setModalOpen(true);\r\n    // //  watch form data values\r\n    // for (var value of subData.values()) {\r\n  \r\n    //  }\r\n  \r\n    \r\n  }\r\n\r\n  useEffect(()=>{\r\n    get(`UserRole/Index`)\r\n    .then(res => {\r\n      \r\n        setRoles(res);\r\n    })\r\n\r\n\r\n  },[])\r\n\r\n\r\n\r\n\r\n    // on Select Role\r\n    const selectRole = (label,value) => {\r\n\r\n        setMenus([]);\r\n        checked = [];\r\n        setRoleLabel(label);\r\n        setRoleValue(value);\r\n\r\n\r\n      get(`RoleMenuItem/GetCheckBoxes/${value}`).then((action)=> {\r\n          \r\n       \r\n            setMenus(action);\r\n        \r\n\r\n            let defaultChecked = checked\r\n                if(action.length > 0){\r\n                    for (let i = 0; i < action.length; i++) {\r\n                    const menu = action[i];\r\n                    if(menu.isChecked == true){\r\n                        const id = menu.id.toString();\r\n                        defaultChecked.push(id)\r\n                        setChecked([...defaultChecked])\r\n                    }\r\n\r\n                    }\r\n                 }\r\n        })\r\n    }\r\n\r\n\r\n    // handling checkbox\r\n    const handleCheck = (e) => {\r\n        let id = e.target.id;\r\n        let val = e.target.checked;\r\n\r\n    // Code Modified Here at 22/10/22 \r\n        if(val == true){\r\n        {\r\n            if(!checked?.includes(id)){\r\n                setChecked([...checked, id]);\r\n            }\r\n        }\r\n        }else{\r\n        const index = checked.indexOf(id);\r\n        if (index > -1) {\r\n            checked.splice(index, 1);\r\n        }\r\n        }\r\n  }\r\n\r\n\r\n  // on Select All Checkbox\r\n  const handleSelectAll = e => {\r\n    let newChecked = [];\r\n    const val = e.target.checked;\r\n    \r\n    if(val == true){\r\n      menus.map(menu => {\r\n        const menuId = menu.id.toString();\r\n        newChecked.push(menuId);\r\n        document.getElementById(menu?.id).checked = true;  \r\n        console.log(menu?.id);\r\n      })\r\n      setChecked([...newChecked]);\r\n    }\r\n\r\n    if(val == false){\r\n      {\r\n        menus.map(menu => {\r\n          document.getElementById(menu.id).checked = false;  \r\n        })\r\n        setChecked([]);\r\n      }\r\n    }\r\n   \r\n  }\r\n\r\n  console.log(checked);\r\n\r\n\r\n  const handleConfirm = () => {\r\n \r\n    setMenus([]);\r\n      const subData = new FormData();\r\n      subData.append('RoleId',  roleValue);\r\n      subData.append('CheckedArr',checked);\r\n      // posting form Data\r\n      post(`RoleMenuItem/Assign`,subData).then((action)=> {\r\n        console.log('checking role menu action',action)\r\n   \r\n        setChecked([]);\r\n            addToast(action?.data?.message, {\r\n              appearance: 'success',\r\n              autoDismiss: true,\r\n            })\r\n            setModalOpen(false)\r\n      }) \r\n  }\r\n    \r\n\r\n\r\n     // redirect to dashboard\r\n    const backToDashboard = () => {\r\n        history.push(\"/\")\r\n    }\r\n    \r\n\r\n\r\n\r\n    const roleName = roles?.map(role => ({label: role.name, value: role.id}));\r\n    return (\r\n        <div>\r\n            <Card className='uapp-card-bg'>\r\n                <CardHeader className=\"page-header\">\r\n                \r\n                    <h3 className='text-white'>Assign Menu</h3>\r\n                    <div className=\"page-header-back-to-home\">\r\n                    <span onClick={backToDashboard} className='text-white'> <i className=\"fas fa-arrow-circle-left\"></i> Back to Dashboard</span>\r\n                    </div>\r\n                \r\n                </CardHeader>\r\n            </Card>\r\n\r\n            <Card>\r\n                <CardHeader>\r\n                <div className=\"container test-score-div-1-style mt-1 mb-4\">\r\n            <span className=\"test-score-span-1-style\">\r\n              <b>Assign or Revoke Menu for User Types.</b>\r\n            </span>\r\n\r\n            <br />\r\n            <div>\r\n              Select a user role to see the assigned menu items for that user. Checkboxes can contain cascading menus. If the parent is not selected, the submenu will not be shown in the menu bar. Please discuss this with the developers before assigning the menu to the user. Or contact the administrator.\r\n            </div>\r\n          </div>\r\n                </CardHeader>\r\n\r\n                <CardBody>\r\n\r\n                <Form onSubmit={handleSubmit} ref={myForm}>\r\n\r\n                    <FormGroup row>\r\n                            <Col sm=\"6\" md=\"4\" lg=\"3\">\r\n                                <Select\r\n                                    options={roleName}\r\n                                    value={{label: rolelabel, value: roleValue }}\r\n                                    onChange={opt => selectRole(opt.label, opt.value)}\r\n                                    name=\"type\"\r\n                                    id=\"type\"\r\n                                />\r\n                                </Col>\r\n                    </FormGroup>\r\n\r\n\r\n                    <FormGroup>\r\n\r\n                                <Row>\r\n                                <Col sm=\"12\">\r\n                                {\r\n                                    menus.length > 0 &&\r\n                                    <div className=\"form-check\">\r\n                                        <input className=\"form-check-input\" onChange={(e)=>handleSelectAll(e)} type=\"checkbox\" name=\"\" />\r\n                                        <label className=\"form-check-label\" htmlFor=\"\">Select All</label>\r\n                                    </div>\r\n                                }\r\n                        \r\n                                </Col>\r\n                                {\r\n                                    roleValue &&\r\n                                    menus?.map(menu =>\r\n                                    \r\n                                    <Col xs=\"6\" sm=\"4\" md=\"3\" key={menu.id}>\r\n                                    <div className=\"form-check\">\r\n                                        <input className=\"form-check-input\" type=\"checkbox\" onChange={(e)=>handleCheck(e)} name=\"\" id={menu.id} checked={checked.includes(`${menu?.id}`)}  />\r\n                                        <label className=\"form-check-label\" htmlFor=\"\">{menu.menuItem}</label>\r\n                                    </div>\r\n                                    </Col>\r\n                                    )\r\n                                }\r\n                                </Row>\r\n                        </FormGroup>\r\n                \r\n\r\n                    <FormGroup style={{display: 'flex',justifyContent: 'space-between'}}>\r\n                            <Row>\r\n\r\n                                <Col>\r\n                                {\r\n                                    permissions?.includes(permissionList?.Asign_Menu) ? \r\n                                    <Button.Ripple\r\n                                type=\"submit\"\r\n                                className=\"mr-1 mt-3 badge-primary\"\r\n                            >\r\n                                Submit\r\n                            </Button.Ripple>\r\n                            :\r\n                            null\r\n                                }\r\n                                </Col>\r\n\r\n                            </Row>\r\n                        </FormGroup>\r\n\r\n\r\n                    </Form>\r\n                    <Modal isOpen={modalOpen} toggle={()=>setModalOpen(!modalOpen)} className=\"uapp-modal\">\r\n                        <ModalBody>\r\n                            <p>Are You Sure to Assign Selected Menus?</p>\r\n                            <Row className=\"mt-3\">\r\n                            <Col md=\"6\" className=\"text-left\">\r\n                            <Button color=\"primary\" onClick={handleConfirm}>Yes</Button>\r\n                            </Col>\r\n                            <Col md=\"6\" className=\"text-right\">\r\n                            <Button color=\"danger\" onClick={()=> setModalOpen(false)}>Cancel</Button>\r\n                            </Col>\r\n                            </Row>\r\n                        </ModalBody>\r\n                    </Modal>\r\n                </CardBody>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    roleList: state.roleDataReducer.roles\r\n})\r\nexport default connect(mapStateToProps)(RoleMenu);\r\n"],"sourceRoot":""}