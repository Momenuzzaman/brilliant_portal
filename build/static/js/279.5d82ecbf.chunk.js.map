{"version":3,"sources":["helpers/post.js","views/SMS/Configuration/ExamTestType/ExamTestTypeAttribute.js"],"names":["AuthStr","localStorage","getItem","url","body","axios","post","rootUrl","headers","res","response","status","history","push","ExamTestTypeAttribute","useHistory","location","useLocation","examTestTypeId","setItem","useState","examTestTypeAttribute","setExamTestTypeAttribute","deleteModal","setDeleteModal","fieldType","setFieldType","fieldTypeLabel","setFieldTypeLabel","fieldTypeValue","setFieldTypeValue","addToast","useToasts","useEffect","get","then","closeDeleteModal","fieldTypeList","map","field","label","name","value","id","className","onClick","md","onSubmit","e","preventDefault","subData","FormData","target","values","data","message","appearance","autoDismiss","type","row","placeholder","required","options","onChange","opt","style","display","justifyContent","Ripple","textAlign","exam","i","key","fieldTypeName","color","isOpen","toggle","remove"],"mappings":"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","file":"static/js/279.5d82ecbf.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nimport history from \"./history\";\r\nimport { rootUrl } from \"../constants/constants\";\r\n\r\nconst AuthStr = localStorage.getItem(\"token\");\r\n\r\nasync function post(url, body = {}, authToken = \"\") {\r\n  try {\r\n    const res = await axios.post(`${rootUrl}${url}`, body, {\r\n      headers: {\r\n        'authorization': AuthStr,\r\n      },\r\n    });\r\n    return await res;\r\n  } catch (error) {\r\n    if (error?.response?.status === 404) {\r\n      history.push(\"/404\");\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default post;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    Input,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Row,\r\n    Table,\r\n  } from \"reactstrap\";\r\n  import Select from \"react-select\";\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport get from '../../../../helpers/get';\r\nimport post from '../../../../helpers/post';\r\nimport remove from '../../../../helpers/remove';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nconst ExamTestTypeAttribute = () => {\r\n\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const examTestTypeAttributeId = localStorage.getItem('examTestTypeAttributeId');\r\n\r\n    \r\n     if(location?.examTestTypeId){\r\n      localStorage.setItem('examTestTypeAttributeId',location?.examTestTypeId);\r\n     }\r\n\r\n    const [examTestTypeAttribute, setExamTestTypeAttribute] = useState([]);\r\n    const [deleteModal, setDeleteModal] = useState(false);\r\n    const [fieldType, setFieldType] = useState([]);\r\n    const [fieldTypeLabel, setFieldTypeLabel] = useState('Field type');\r\n    const [fieldTypeValue, setFieldTypeValue] = useState('');\r\n    const {addToast} = useToasts();\r\n\r\n\r\n    useEffect(()=>{\r\n        // get('ExamTestTypeAttribute/Index')\r\n        // .then(res => {\r\n        \r\n        //     setExamTestTypeAttribute(res?.data?.result);\r\n\r\n        // })\r\n\r\n\r\n        get('FieldType/GetAll')\r\n        .then(res => {\r\n          \r\n          setFieldType(res);\r\n        })\r\n\r\n\r\n        get(`ExamTestTypeAttribute/GetByExamTestType/${localStorage.getItem('examTestTypeAttributeId')}`)\r\n        .then(res => {\r\n          \r\n          setExamTestTypeAttribute(res);\r\n        })\r\n\r\n        // get(`ExamTestTypeAttribute/GetByExamTestType/${examTestTypeAttributeId}`)\r\n        // .then(res => {\r\n       \r\n        // })\r\n\r\n    },[])\r\n\r\n  \r\n    \r\n    const backToList = () => {\r\n        history.push('/examTestType');\r\n    }\r\n\r\n    \r\n    const toggleDanger = (name,id) => {\r\n        \r\n       \r\n        setDeleteModal(true)\r\n       }\r\n\r\n           // on Close Delete Modal\r\nconst closeDeleteModal = () => {\r\n    setDeleteModal(false);\r\n  \r\n\r\n}\r\n\r\n\r\nconst fieldTypeList = fieldType?.map((field) => ({\r\n  label: field.name,\r\n  value: field.id,\r\n}));\r\n\r\n\r\n     // select  field type\r\nconst selectFieldType = (label, value) => {\r\nsetFieldTypeLabel(label);\r\nsetFieldTypeValue(value);\r\n\r\n\r\n\r\n}\r\n\r\nconst handleSubmit = (e) => {\r\n\r\n  e.preventDefault();\r\n  const subData = new FormData(e.target);\r\n\r\n  for(var y of subData.values()){\r\n\r\n  }\r\n\r\n  post('ExamTestTypeAttribute/Create',subData)\r\n  .then(res => {\r\n   \r\n    addToast(res?.data?.message,{\r\n      appearance: 'error',\r\n      autoDismiss: true\r\n\r\n    })\r\n    get(`ExamTestTypeAttribute/GetByExamTestType/${localStorage.getItem('examTestTypeAttributeId')}`)\r\n    .then(res => {\r\n    \r\n      setExamTestTypeAttribute(res);\r\n    })\r\n  })\r\n}\r\n\r\nconst handleDelete = (data) => {\r\n\r\n  \r\n  remove(`ExamTestTypeAttribute/Delete/${data?.id}`)\r\n  .then(res => {\r\n   \r\n    setDeleteModal(false);\r\n    addToast(res,{\r\n      appearance: 'error',\r\n      autoDismiss: true\r\n    })\r\n    get(`ExamTestTypeAttribute/GetByExamTestType/${localStorage.getItem('examTestTypeAttributeId')}`)\r\n    .then(res => {\r\n     \r\n      setExamTestTypeAttribute(res);\r\n    })\r\n  }) \r\n\r\n}\r\n\r\n\r\n    return (\r\n        <div >\r\n\r\n        <Card className=\"uapp-card-bg\">\r\n        <CardHeader className=\"page-header\">\r\n          <h3 className=\"text-white\">Exam Test Type Attribute Details </h3>\r\n          <div className=\"page-header-back-to-home\">\r\n            <span className=\"text-white\"  onClick={backToList}>\r\n              {\" \"}\r\n              <i className=\"fas fa-arrow-circle-left\"></i> Back to Exam Test Type List\r\n            </span>\r\n          </div>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      <div className=''>\r\n      <Card>\r\n        <Row className='pt-3'>\r\n      \r\n          <Col md=\"4\">\r\n          <Card className=\"uapp-card-bg mx-2\">\r\n          <CardHeader className=\"page-header\">\r\n            <h3 className=\"text-white\">Add Attribute</h3>\r\n           \r\n          </CardHeader>\r\n        </Card>\r\n          \r\n\r\n          <Form className=\"mt-5 mx-3\" onSubmit={handleSubmit}>\r\n           \r\n\r\n          <input\r\n          \r\n          type='hidden'\r\n          name='examTestTypeId'\r\n          id='examTestTypeId'\r\n          value={localStorage.getItem('examTestTypeAttributeId')}\r\n          />\r\n        \r\n         <FormGroup row className=\"has-icon-left position-relative\">\r\n           <Col md=\"4\">\r\n             <span>\r\n              Name <span className=\"text-danger\">*</span>{\" \"}\r\n             </span>\r\n           </Col>\r\n           <Col md=\"8\">\r\n             <Input\r\n               type=\"text\"\r\n               name=\"name\"\r\n               id=\"name\"\r\n               placeholder=\"Enter name\"\r\n               required\r\n             \r\n             />\r\n         \r\n           </Col>\r\n         </FormGroup>\r\n      \r\n         \r\n       \r\n\r\n         <FormGroup row className=\"has-icon-left position-relative\">\r\n           <Col md=\"4\">\r\n             <span>\r\n                Field Type <span className=\"text-danger\">*</span>{\" \"}\r\n             </span>\r\n           </Col>\r\n           <Col md=\"8\">\r\n             <Select\r\n             options={fieldTypeList}\r\n             value={{ label: fieldTypeLabel, value: fieldTypeValue }}\r\n             onChange={(opt) => selectFieldType(opt.label, opt.value)}\r\n               name=\"fieldTypeId\"\r\n               id=\"fieldTypeId\"\r\n               required\r\n             />\r\n\r\n         \r\n           </Col>\r\n         </FormGroup>\r\n       \r\n        \r\n         \r\n         \r\n       \r\n\r\n        \r\n\r\n\r\n         <FormGroup\r\n           className=\"has-icon-left position-relative\"\r\n           style={{ display: \"flex\", justifyContent: 'end' }}\r\n         >\r\n           <Button.Ripple\r\n             type=\"submit\"\r\n             className=\"mr-1 mt-3 badge-primary\"\r\n           >\r\n             Submit\r\n           </Button.Ripple>\r\n           \r\n          \r\n         </FormGroup>\r\n         \r\n       </Form>\r\n          \r\n            \r\n           \r\n            \r\n          </Col>\r\n          <Col md=\"8\">\r\n            \r\n            <div className=\"table-responsive page-header \">\r\n            <Table className=\"table-sm table-bordered\" >\r\n            <thead className=\"thead-uapp-bg\" >\r\n                <tr style={{ textAlign: \"center\" }}>\r\n                \r\n                  <th> Name</th>\r\n                  <th>Type</th>\r\n                  <th>Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n  \r\n                {\r\n                  examTestTypeAttribute?.map((exam, i) => <tr key={exam?.id}>\r\n                  \r\n                    <td>{exam?.name}</td>\r\n                    <td>{exam?.fieldTypeName}</td>\r\n                   \r\n\r\n                   \r\n                    <td>\r\n                      <Button className=\"mx-2\" onClick={() => toggleDanger(exam?.name, exam?.id)} color=\"danger\"><i className=\"fas fa-trash-alt\"></i></Button>\r\n                      <Modal isOpen={deleteModal} toggle={closeDeleteModal} className=\"uapp-modal\">\r\n    \r\n                      <ModalBody>\r\n                        <p>Are You Sure to Delete this? Once Deleted it can't be Undone!</p>\r\n                      </ModalBody>\r\n\r\n                      <ModalFooter>\r\n                        <Button color=\"danger\" onClick={()=> handleDelete(exam)}>YES</Button>\r\n                        <Button onClick={closeDeleteModal}>NO</Button>\r\n                      </ModalFooter>\r\n\r\n                    </Modal>\r\n                     \r\n  \r\n                    </td>\r\n                  </tr>)\r\n                }\r\n  \r\n              </tbody>\r\n            </Table>\r\n            </div>\r\n              \r\n               \r\n              \r\n            \r\n          </Col>\r\n        \r\n        </Row>\r\n        </Card>\r\n       \r\n      </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExamTestTypeAttribute;"],"sourceRoot":""}