{"version":3,"sources":["views/SMS/Pagination/Pagination.jsx","views/SMS/Notifications/Notifications.js"],"names":["Pagination","PageIndex","TotalPages","PreviousPage","NextPage","dataPerPage","totalData","paginate","currentPage","totalpages","Math","ceil","startpage","endpage","pageNumbers","i","push","md","className","style","cursor","onClick","map","number","key","textAlign","marginTop","paddingRight","Notifications","history","useHistory","addToast","useToasts","useState","setCurrentPage","setCallApi","entity","setEntity","data","setData","success","setSuccess","deleteModal","setDeleteModal","delDadta","setDelData","buttonStatus","setButtonStatus","useEffect","get","then","res","totalEntity","models","dsn","label","value","isOpen","toggle","color","id","appearance","autoDismiss","disabled","list","e","createdOn","Date","toLocaleString","split","isSeen","markAsReadNotification","toggleDanger","targetUrl","gotoPath","title","description","pageNumber","prev"],"mappings":"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","file":"static/js/287.277b7757.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Row,Col} from 'reactstrap'\r\nconst Pagination = ({ dataPerPage, totalData, paginate, currentPage }) => {\r\n\r\n    let PageIndex = 0;\r\n    let PageSize = 0;\r\n    let TotalCount = 0;\r\n    let TotalPages = 0;\r\n    let PreviousPage = 0;\r\n    let NextPage = 0;\r\n  \r\n    const totalpages = Math.ceil(totalData / dataPerPage);\r\n    let startpage = currentPage - 5;\r\n    let endpage = currentPage + 4;\r\n    if (startpage <= 0) {\r\n        endpage = endpage - (startpage - 1);\r\n        startpage = 1;\r\n    }\r\n    if (endpage > totalpages) {\r\n        endpage = totalpages;\r\n        if (endpage > 10) {\r\n            startpage = endpage - 9;\r\n        }\r\n    }\r\n    TotalCount = totalData;\r\n    PageIndex = currentPage;\r\n    PageSize = dataPerPage;\r\n    TotalPages = totalpages;\r\n    PreviousPage = startpage;\r\n    NextPage = endpage;\r\n\r\n\r\n    // const prev = currentPage > 1 ? (currentPage - 1) : 1;\r\n    // const last = Math.ceil(totalData / dataPerPage);\r\n    //     for (let i = 1; i <= Math.ceil(totalData/dataPerPage); i++) {\r\n\r\n    //         pageNumbers.push(i)\r\n    //     }\r\n\r\n    // let newPageNumbers;\r\n\r\n    // if(pageNumbers.length>10){\r\n    //  newPageNumbers = pageNumbers.slice(0,10)\r\n    // }\r\n    const pageNumbers = [];\r\n    const last = NextPage;\r\n    const next = (last === currentPage) ? currentPage : currentPage + 1;\r\n\r\n    const prev = PreviousPage;\r\n    \r\n    for (let i = PreviousPage; i <= NextPage; i++){\r\n        pageNumbers.push(i)\r\n    }\r\n\r\n        return (\r\n         <Row>\r\n             <Col md=\"6\">\r\n             <nav className=\"page navigation uapp-pagination\">\r\n                <ul className=\"pagination ml-2\">\r\n\r\n                    {\r\n                        PageIndex > 1 &&\r\n                        <>\r\n                  <li className=\"pagination-item pagination-First\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(1)} className=\"page-link\">\r\n                            First\r\n                        </p>\r\n                    </li>\r\n\r\n                    <li className=\"pagination-item\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(PageIndex - 1)} className=\"page-link\">\r\n                      <i className=\"fas fa-chevron-left\"></i>\r\n                        </p>\r\n                    </li>\r\n                        </>\r\n                    }\r\n\r\n                    \r\n\r\n                    {\r\n\r\n                        pageNumbers.map(number =>\r\n\r\n                            PageIndex==number ?\r\n                            <li key={number} className=\"pagination-item \">\r\n                                <p style={{ cursor: 'pointer' }} onClick={() => paginate(number)} className=\"page-link page-active\">\r\n                                    {number}\r\n                                </p>\r\n                            </li>\r\n                            :\r\n                            <li key={number} className=\"pagination-item\">\r\n                            <p style={{ cursor: 'pointer' }} onClick={() => paginate(number)} className=\"page-link\">\r\n                                {number}\r\n                            </p>\r\n                        </li>\r\n\r\n                        )\r\n                    }\r\n                    {\r\n                        PageIndex < TotalPages &&\r\n                        <>\r\n                        <li className=\"pagination-item\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(PageIndex + 1)} className=\"page-link\">\r\n                      <i className=\"fas fa-chevron-right\"></i>\r\n                        </p>\r\n                    </li>\r\n                  <li className=\"pagination-item pagination-Last\">\r\n                        <p style={{ cursor: 'pointer' }} onClick={() => paginate(TotalPages)} className=\"page-link\">\r\n                            Last\r\n                        </p>\r\n                    </li>\r\n                        </>\r\n                    }\r\n                </ul>\r\n            </nav>\r\n             </Col>\r\n\r\n             <Col md=\"6\" style={{textAlign: 'right', marginTop: '1.5%', paddingRight: '2.5%'}}>\r\n                 <h5>Total Results Found: {totalData}</h5>\r\n             </Col>\r\n         </Row>\r\n        )\r\n}\r\n\r\nexport default Pagination","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Card, CardHeader, CardBody, Row, Col, Button, Modal, ModalBody,ModalFooter } from 'reactstrap';\r\nimport get from '../../../helpers/get';\r\nimport Select from \"react-select\";\r\nimport Pagination from '../Pagination/Pagination';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport remove from '../../../helpers/remove';\r\n\r\nconst Notifications = () => {\r\n\r\n    const history = useHistory();\r\n    const {addToast} = useToasts();\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [dataPerPage, setDataPerPage] = useState(30);\r\n    const [callApi, setCallApi] = useState(false);\r\n    const [entity, setEntity] = useState(0);\r\n    const [data,setData] = useState([]);\r\n    const [success,setSuccess] = useState(false);\r\n    const [deleteModal,setDeleteModal]  = useState(false);\r\n    const [delDadta,setDelData] = useState({});\r\n    const [buttonStatus,setButtonStatus] = useState(false);\r\n\r\n  \r\n    useEffect(()=>{\r\n\r\n        get(`Notification/Index?page=${currentPage}&pageSize=${dataPerPage}`)\r\n        .then(res => {\r\n           \r\n            setEntity(res?.totalEntity);\r\n            setData(res?.models);\r\n        })\r\n\r\n    },[dataPerPage,currentPage, success])\r\n\r\n\r\n      // user select data per page\r\n  const dataSizeArr = [10, 15, 20, 30, 50, 100, 1000];\r\n  const dataSizeName = dataSizeArr.map((dsn) => ({ label: dsn, value: dsn }));\r\n\r\n  const selectDataSize = (value) => {\r\n    \r\n    setDataPerPage(value);\r\n    setCallApi((prev) => !prev);\r\n  };\r\n\r\n    //  change page\r\n    const paginate = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n        setCallApi((prev) => !prev);\r\n      };\r\n\r\n    const backToDashboard = () => {\r\n        history.push('/');\r\n    }\r\n\r\n    const gotoPath = (data) => {\r\n        history.push(data?.targetUrl);\r\n    }\r\n\r\n    const handleDate = (e) => {\r\n        var datee = e;\r\n        var utcDate = new Date(datee);\r\n        var localeDate = utcDate.toLocaleString(\"en-CA\");\r\n        const x = localeDate.split(\",\")[0];\r\n        return x;\r\n      };\r\n\r\n      const toggleDanger = (data) => {\r\n        \r\n        setDelData(data);\r\n        setDeleteModal(true);\r\n      }\r\n\r\n      const handleDeleteData = () =>{\r\n        setButtonStatus(true);\r\n        get(`Notification/Delete/${delDadta?.id}`)\r\n        .then(res => {\r\n          setButtonStatus(false);\r\n          if(res){\r\n            addToast('Notification Deleted',{\r\n              appearance: 'error',\r\n              autoDismiss: true\r\n            })\r\n            setDelData({});\r\n            setDeleteModal(false);\r\n            setSuccess(!success);\r\n          }\r\n          else{\r\n            addToast('Something Went Wrong',{\r\n              appearance: 'error',\r\n              autoDismiss: true\r\n            })\r\n          }\r\n      \r\n        })\r\n       \r\n      }\r\n\r\n      const deletAllNotification = () => {\r\n        setButtonStatus(true);\r\n         remove(`Notification/DeleteAll`)\r\n         .then(res => {\r\n          setButtonStatus(false);\r\n          addToast(res,{\r\n            appearance:'error',\r\n            autoDismiss: true\r\n          })\r\n          setSuccess(!success);\r\n\r\n\r\n         })\r\n      }\r\n\r\n      const deletAllSeen = () => {\r\n        setButtonStatus(true);\r\n         remove(`Notification/DeleteAllOnlySeens`)\r\n         .then(res => {\r\n          setButtonStatus(false);\r\n          addToast(res,{\r\n            appearance:'error',\r\n            autoDismiss: true\r\n          })\r\n          setSuccess(!success);\r\n\r\n\r\n         })\r\n      }\r\n\r\n      const markAsReadNotification = (data) => {\r\n\r\n        \r\n        get(`Notification/ViewNotification/${data?.id}`)\r\n        .then(res => {\r\n           \r\n            if(res){\r\n                setSuccess(!success);\r\n               \r\n            }\r\n        })\r\n      }\r\n\r\n    return (\r\n        <div>\r\n\r\n                            <Modal\r\n                            isOpen={deleteModal}\r\n                            toggle={() => setDeleteModal(!deleteModal)}\r\n                            className=\"uapp-modal2\"\r\n                          >\r\n                            <ModalBody>\r\n                              <p>\r\n                                Are You Sure to Delete this ? Once Deleted it\r\n                                can't be Undone!\r\n                              </p>\r\n                            </ModalBody>\r\n\r\n                            <ModalFooter>\r\n                              <Button color=\"danger\" onClick={handleDeleteData} disabled={buttonStatus}>\r\n                                YES\r\n                              </Button>\r\n                              <Button onClick={() => setDeleteModal(false)}>\r\n                                NO\r\n                              </Button>\r\n                            </ModalFooter>\r\n                          </Modal>\r\n\r\n    <Card className=\"uapp-card-bg\">\r\n        <CardHeader className=\"page-header\">\r\n          <h3 className=\"text-white\">All Notifications</h3>\r\n          <div className=\"page-header-back-to-home\">\r\n            <span onClick={backToDashboard} className=\"text-white\">\r\n              {\" \"}\r\n              <i className=\"fas fa-arrow-circle-left\"></i> Back to Dashboard\r\n            </span>\r\n          </div>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n  \r\n        {/* <Card>\r\n\r\n          <CardBody>\r\n\r\n            {\r\n              data?.length > 0 ? \r\n              <div className='d-flex justify-content-end'>\r\n\r\n              <Button color='danger mr-1 btn-sm' onClick={deletAllNotification} disabled={buttonStatus}>\r\n                Delete All\r\n\r\n              </Button>\r\n\r\n              <Button color='danger ml-1 btn-sm' onClick={deletAllSeen}>\r\n                Delete Only Seen\r\n\r\n              </Button>\r\n\r\n            </div>\r\n\r\n            :\r\n\r\n            <div className='text-center'>\r\n\r\n              <span style={{fontWeight: '500'}}>No Notification Found</span>\r\n\r\n            </div>\r\n            }\r\n\r\n          </CardBody>\r\n\r\n\r\n        </Card> */}\r\n\r\n          {/* map data from array and show */}\r\n\r\n          {\r\n            data?.map((list,i) => (\r\n                \r\n                <Card key={i} className='my-3 notification-div'>\r\n                  \r\n                <CardBody>\r\n\r\n                <div className='d-flex justify-content-between'>\r\n                    <span>{handleDate(list?.createdOn)}</span>\r\n                    <div className='d-flex'>\r\n                       {\r\n                        !(list?.isSeen) ?\r\n                        <Button color='primary' className='mr-1 btn-sm' onClick={()=> markAsReadNotification(list)}>\r\n                        Mark as Read\r\n\r\n                         </Button>\r\n                         :\r\n                         null\r\n                       }\r\n\r\n                        <Button color='danger' className='ml-1 btn-sm' onClick={()=> toggleDanger(list)}>\r\n                            Delete\r\n\r\n                        </Button>\r\n\r\n                     \r\n\r\n                    </div>\r\n                   \r\n\r\n                    </div>\r\n\r\n                    <div>\r\n                    <span className='title' onClick={()=>gotoPath(list)}>{list?.title}</span>\r\n                    <span className='description'>{list?.description}</span>\r\n                    </div>\r\n\r\n\r\n                </CardBody>\r\n                    \r\n\r\n\r\n                </Card>\r\n            ))\r\n          }\r\n\r\n         \r\n\r\n        <Card>\r\n\r\n        <CardBody>\r\n\r\n        <Pagination\r\n            dataPerPage={dataPerPage}\r\n            totalData={entity}\r\n            paginate={paginate}\r\n            currentPage={currentPage}\r\n          />\r\n    \r\n        </CardBody>\r\n\r\n        </Card>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notifications;"],"sourceRoot":""}