{"version":3,"sources":["helpers/post.js","helpers/put.js","views/SMS/Search/Loader/Loader.js","views/SMS/Configuration/ExamTestType/ExamTestType.js"],"names":["AuthStr","localStorage","getItem","url","body","axios","post","rootUrl","headers","res","response","status","history","push","Axios","put","Loader","className","src","loader","ExamTestType","useHistory","useState","modalOpen","setModalOpen","success","setSuccess","examTestType","setExamTestType","examTestTypeValue","setExamTestTypeValue","loading","setLoading","addToast","useToasts","useEffect","get","then","action","catch","closeModal","removeItem","idVal","onClick","length","isOpen","toggle","onSubmit","e","preventDefault","subdata","FormData","target","data","message","appearance","autoDismiss","pathname","examTestTypeId","result","id","type","value","name","row","md","defaultValue","placeholder","onChange","style","display","justifyContent","color","subData","Ripple","textAlign","map","exam","i","key","scope"],"mappings":"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","file":"static/js/257.11baa75a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nimport history from \"./history\";\r\nimport { rootUrl } from \"../constants/constants\";\r\n\r\nconst AuthStr = localStorage.getItem(\"token\");\r\n\r\nasync function post(url, body = {}, authToken = \"\") {\r\n  try {\r\n    const res = await axios.post(`${rootUrl}${url}`, body, {\r\n      headers: {\r\n        'authorization': AuthStr,\r\n      },\r\n    });\r\n    return await res;\r\n  } catch (error) {\r\n    if (error?.response?.status === 404) {\r\n      history.push(\"/404\");\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default post;\r\n","import Axios from \"axios\";\r\n\r\nimport history from \"./history\";\r\nimport { rootUrl } from \"../constants/constants\";\r\n\r\nconst AuthStr = localStorage.getItem(\"token\");\r\nasync function put(url, body = {}, authToken = \"\") {\r\n  try {\r\n    const res = await Axios.put(`${rootUrl}${url}`, body, {\r\n      headers: {\r\n        \"authorization\": AuthStr,\r\n      },\r\n    });\r\n    return await res;\r\n  } catch (error) {\r\n    return error;\r\n    // if (error.response.status === 404) {\r\n    //   history.push(\"/404\");\r\n      \r\n    // }\r\n    // else if(error.response.status === 400){\r\n    //   history.push('/400')\r\n    // }\r\n\r\n    // throw error;\r\n  }\r\n}\r\n\r\nexport default put;\r\n","import React from 'react';\r\nimport loader from '../../../../assets/img/load.gif'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className='text-center'>\r\n            <img className='img-fluid' src={loader} />\r\n\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, ButtonGroup, Card, CardBody, CardHeader, Col, FormGroup, Input, Modal, ModalBody, ModalFooter, ModalHeader, Table, Form } from 'reactstrap';\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\n\r\n\r\n\r\nimport get from '../../../../helpers/get';\r\nimport remove from '../../../../helpers/remove';\r\nimport put  from '../../../../helpers/put';\r\nimport post from '../../../../helpers/post';\r\nimport { ValueService } from 'ag-grid-community';\r\nimport Loader from '../../Search/Loader/Loader';\r\n\r\n\r\nconst ExamTestType = () => {\r\n\r\n    const history = useHistory();\r\n    \r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [deleteModal, setDeleteModal] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const [examTestType , setExamTestType] = useState([]);\r\n    const [examTestTypeValue , setExamTestTypeValue] = useState('');\r\n    const [loading,setLoading] = useState(true);\r\n\r\n  const { addToast } = useToasts();\r\n\r\n\r\n\r\n   \r\n  \r\n\r\n\r\n\r\n    useEffect(()=> {\r\n   get(`ExamTestType/Index`).then((action)=>{\r\n\r\n    setExamTestType(action);\r\n    setLoading(false);\r\n    \r\n   \r\n  \r\n    }).catch();\r\n\r\n  \r\n\r\n    \r\n    \r\n\r\n\r\n},[success])\r\n\r\n\r\n    const backToDashboard = () => {\r\n        history.push('/');\r\n    }\r\n\r\n    // const toggleDanger = (name,id) => {\r\n    //     localStorage.setItem('examTestTypeName',name);\r\n    //     localStorage.setItem('examTestTypeValue',id);\r\n       \r\n    //     setDeleteModal(true)\r\n    //    }\r\n\r\n\r\n    // on Close Delete Modal\r\n// const closeDeleteModal = () => {\r\n//     setDeleteModal(false);\r\n//     localStorage.removeItem('examTestTypeName');\r\n//     localStorage.removeItem('examTestTypeValue');\r\n\r\n// }\r\n\r\n// on Close Modal\r\nconst closeModal = () => {\r\n    setModalOpen(false);\r\n    localStorage.removeItem('updateUniCountry')\r\n\r\n}\r\n\r\n// const handleDeleteUniCountry = (id) => {\r\n\r\n\r\n  \r\n\r\n//      remove(`ExamTestType/Delete/${id}`).then((action)=> {\r\n//       setDeleteModal(false);\r\n//       setSuccess(!success);\r\n//        addToast(action, {\r\n//          appearance: 'error',\r\n//          autoDismiss: true,\r\n//        })\r\n//        localStorage.removeItem('examTestTypeName');\r\n//        localStorage.removeItem('examTestTypeValue');\r\n//     })\r\n    \r\n//       const newData = examTestType.filter( extp => extp?.id !== id);\r\n//       setExamTestType(newData);\r\n//       setExamTestTypeValue('');\r\n//   }\r\n\r\n  // const handleUpdate = (data) => {\r\n  //   setModalOpen(true);\r\n  //   setExamTestTypeValue(data?.name);\r\n    \r\n  //   localStorage.setItem('updateExamTestTypeValue',data.id);\r\n \r\n    \r\n  \r\n   \r\n  // }\r\n\r\n  const handleUpdateSubmit = () => {\r\n\r\n\r\n  \r\n    const subData = {\r\n      id: idVal,\r\n      name: examTestTypeValue\r\n    }\r\n  \r\n   \r\n\r\n   \r\n\r\n    put(`ExamTestType/Update`,subData).then((action)=> {\r\n      setSuccess(!success);\r\n      setModalOpen(false)\r\n      addToast(action?.data?.message, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      })\r\n  \r\n  \r\n     setExamTestTypeValue('');\r\n    })\r\n    localStorage.removeItem('updateExamTestTypeValue')\r\n  \r\n  \r\n  }\r\n\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n\r\n    e.preventDefault();\r\n  \r\n    const subdata = new FormData(e.target);\r\n\r\n\r\n  \r\n       post(`ExamTestType/Create`,subdata).then((action)=>{\r\n\r\n       \r\n  \r\n          setSuccess(!success)\r\n          setModalOpen(false)\r\n          addToast(action?.data?.message, {\r\n            appearance: 'success',\r\n            autoDismiss: true,\r\n          })\r\n          setModalOpen(false);\r\n          history.push({\r\n           pathname: '/examTestTypeAttribute',\r\n           examTestTypeId : action?.data?.result?.id \r\n          })\r\n        \r\n\r\n            setExamTestTypeValue('');\r\n      });\r\n\r\n     \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  }\r\n\r\n  // const handleCheckExamTestTypeAttribute = (id) => {\r\n \r\n  //   localStorage.setItem('examTestTypeAttributeId',id);\r\n  //   history.push('/examTestTypeAttribute');\r\n\r\n  // }\r\n\r\n\r\n  const idVal =localStorage.getItem('updateExamTestTypeValue');\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n          {\r\n            loading?\r\n            <Loader/>\r\n            :\r\n            <div>\r\n               <Card className=\"uapp-card-bg\">\r\n              <CardHeader className=\"page-header\">\r\n                <h3 className=\"text-white\">Exam Test Type</h3>\r\n                <div className=\"page-header-back-to-home\">\r\n                  <span onClick={backToDashboard} className=\"text-white\">\r\n                    {\" \"}\r\n                    <i className=\"fas fa-arrow-circle-left\"></i> Back to Dashboard\r\n                  </span>\r\n                </div>\r\n              </CardHeader>\r\n            </Card>\r\n\r\n            <Card>\r\n            <CardHeader>\r\n           \r\n              {/* <Button className=\"btn btn-uapp-add\" onClick={() => setModalOpen(true)}> <i className=\"fas fa-plus\"></i>  Add New</Button> */}\r\n              <div className=\"ml-auto\">\r\n                <div>\r\n                 <b> Total <span className=\"badge badge-primary\">{examTestType?.length}</span> Exam Test Type Found   </b>\r\n                 </div>\r\n                 </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n    \r\n              <div>\r\n    \r\n                <Modal isOpen={modalOpen} toggle={closeModal} className=\"uapp-modal\">\r\n                  <ModalHeader>Add Exam Test Type</ModalHeader>\r\n                  <ModalBody>\r\n                    <Form onSubmit={handleSubmit}>\r\n\r\n\r\n                    {\r\n                      idVal ? \r\n\r\n                      <input\r\n                      type='hidden'\r\n                      value={idVal}\r\n                      name='id'\r\n                      id='id'\r\n\r\n\r\n                      />\r\n\r\n                      :\r\n                      \r\n                      null\r\n\r\n\r\n                    }\r\n\r\n                      <FormGroup row className=\"has-icon-left position-relative\">\r\n                        <Col md=\"4\">\r\n                          <span>Exam Test Type</span>\r\n                        </Col>\r\n                        <Col md=\"8\">\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            id=\"name\"\r\n                            defaultValue={examTestTypeValue}\r\n                            placeholder=\"Create exam test type\"\r\n                            onChange={(e) => setExamTestTypeValue(e.target.value)}\r\n                          />\r\n    \r\n                        </Col>\r\n                      </FormGroup>\r\n    \r\n                      <FormGroup className=\"has-icon-left position-relative\" style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n    \r\n                        <Button color=\"danger\" className=\"mr-1 mt-3\" onClick={closeModal}>Close</Button>\r\n    \r\n                        {\r\n                          idVal ?\r\n                          <Button color=\"warning\" className=\"mr-1 mt-3\" onClick={handleUpdateSubmit}>Update</Button> :\r\n                          <Button.Ripple\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            className=\"mr-1 mt-3\"\r\n                             \r\n                          >\r\n                            Submit\r\n                          </Button.Ripple>\r\n    \r\n                      }\r\n    \r\n                      </FormGroup>\r\n    \r\n                    </Form>\r\n                  </ModalBody>\r\n    \r\n                </Modal>\r\n                \r\n              </div>\r\n              <div className=\"table-responsive\">\r\n              <Table className=\"table-sm table-bordered\" >\r\n              <thead className=\"thead-uapp-bg\">\r\n                  <tr style={{ textAlign: \"center\" }}>\r\n                    <th>SL/NO</th>\r\n                    <th> Name</th>\r\n                    {/* <th className=\"text-center\" >Attribute</th>\r\n                    <th>Action</th> */}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n    \r\n                  {\r\n                    examTestType?.map((exam, i) => <tr key={exam?.id}>\r\n                      <th style={{ textAlign: \"center\" }} scope=\"row\">{i + 1}</th>\r\n                      <td style={{ textAlign: \"center\" }}>{exam?.name}</td>\r\n                      {/* <td>               \r\n                      <Button color=\"primary\" onClick={()=>handleCheckExamTestTypeAttribute(exam.id)} className=\"mx-1 btn-sm\">\r\n                      {\" \"}\r\n                      <i className=\"fas fa-eye\"></i>{\" \"}\r\n                    </Button>\r\n                      </td>\r\n                      <td>\r\n                        <Button className=\"mx-2\" onClick={() => toggleDanger(exam?.name, exam?.id)} color=\"danger\"><i className=\"fas fa-trash-alt\"></i></Button>\r\n                        <Button onClick={()=> handleUpdate(exam)} className=\"mx-2\" color=\"warning\"><i className=\"fas fa-edit\"></i></Button>\r\n    \r\n    \r\n                        <Modal isOpen={deleteModal} toggle={closeDeleteModal} className=\"uapp-modal\">\r\n    \r\n                          <ModalBody>\r\n                            <p>Are You Sure to Delete this? Once Deleted it can't be Undone!</p>\r\n                          </ModalBody>\r\n    \r\n                          <ModalFooter>\r\n                            <Button color=\"danger\" onClick={() => handleDeleteUniCountry(localStorage.getItem('examTestTypeValue'))}>YES</Button>\r\n                            <Button onClick={closeDeleteModal}>NO</Button>\r\n                          </ModalFooter>\r\n    \r\n                        </Modal>\r\n                      </td> */}\r\n                    </tr>)\r\n                  }\r\n    \r\n                </tbody>\r\n              </Table>\r\n              </div>\r\n    \r\n            </CardBody>\r\n          </Card>\r\n\r\n            </div>\r\n          }\r\n       \r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExamTestType;"],"sourceRoot":""}