{"version":3,"sources":["views/SMS/Configuration/Menu/Menu.jsx","redux/actions/SMS/MenuActions/MenuActions.js","helpers/post.js","views/SMS/Components/CustomButtonRipple.js"],"names":["connect","state","parentMenuItems","parentMenuItemReducer","parentMenus","props","parentMenuitems","dispatch","useDispatch","myForm","createRef","useState","setTitle","setNavLink","type","setType","parentTitle","setParentTitle","parentValue","setParentValue","displayOrder","setDisplayOrder","addToast","useToasts","history","useHistory","userType","localStorage","getItem","useEffect","get","displayUserType","then","action","setItem","JSON","stringify","payload","menuTypeName","map","m","label","value","parentMenutitles","pm","title","id","Card","className","CardHeader","onClick","push","class","CardTitle","CardBody","Form","onSubmit","event","preventDefault","subData","FormData","target","post","data","message","appearance","autoDismiss","ref","FormGroup","row","Col","md","UncontrolledTooltip","placement","lg","Input","name","placeholder","onChange","e","required","options","opt","style","display","justifyContent","CustomButtonRipple","permission","AuthStr","url","body","axios","rootUrl","headers","res","response","status","isDisabled","color","icon","func","Ripple","disabled"],"mappings":"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","file":"static/js/257.1deb633b.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef } from 'react'\r\nimport {Alert} from \"reactstrap\"\r\nimport Select from 'react-select';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, FormText, Col, Row, Card, CardHeader, CardTitle, CardBody, UncontrolledTooltip } from 'reactstrap';\r\nimport { User, Type } from \"react-feather\"\r\nimport { connect, useDispatch } from \"react-redux\";\r\n\r\n\r\nimport { StoreParentMenuItem } from '../../../../redux/actions/SMS/MenuActions/MenuActions';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport { useHistory } from 'react-router';\r\nimport get from '../../../../helpers/get';\r\nimport post from '../../../../helpers/post';\r\nimport CustomButtonRipple from '../../Components/CustomButtonRipple';\r\n\r\nconst Menu = (props) => {\r\n\r\n   const parentMenuitems = props.parentMenuItems[0];\r\n  \r\n  \r\n   const dispatch = useDispatch();\r\n   const myForm = createRef();\r\n   const [title,setTitle] = useState('');\r\n   const [navLink,setNavLink] = useState('');\r\n   const [type,setType] = useState('Select Type...');\r\n   const [parentTitle,setParentTitle] = useState('Select Parent...');\r\n   const [parentValue,setParentValue] = useState(null);\r\n   const [displayOrder,setDisplayOrder] = useState(0);\r\n   const [icon,setIcon] = useState(null);\r\n   const [parentId,setParentId] = useState(null);\r\n   const { addToast } = useToasts();\r\n   const history = useHistory();\r\n\r\nconst userType = localStorage.getItem('current_user');\r\n  //  get menu list and store into redux store\r\n   useEffect(()=> {\r\n    const returnvalue = get(`RoleMenuItem/Index/${userType?.displayUserType}`).then((action)=> {\r\n    \r\n      localStorage.setItem(\"menu\", JSON.stringify(action));\r\n\r\n      \r\n      dispatch(StoreParentMenuItem(action))\r\n    })\r\n   },[dispatch])\r\n\r\n\r\n\r\n   const handleSubmit = (event) => {\r\n     event.preventDefault();\r\n   \r\n\r\n     const subData = new FormData(event.target)\r\n   \r\n\r\n    //  watch form data values\r\n    //  for (var value of subData.values()) {\r\n  \r\n    //  }\r\n\r\n    //  post form data and notify the response to user\r\n     const returnValue = post(`MenuItem/Create`,subData).then((action)=> {\r\n\r\n       addToast(action?.data?.message, {\r\n        appearance: 'success',\r\n        autoDismiss: true,\r\n      });\r\n     })\r\n\r\n\r\n   }\r\n\r\n   const handleDisplayOrder = (v) => {\r\n     setDisplayOrder(v)\r\n   }\r\n\r\n   const selectMenuTypeName = (label, value) => {\r\n     setType(label)\r\n   }\r\n\r\n   const selectparentMenutitles = (label,value) => {\r\n    setParentTitle(label)\r\n    setParentValue(value)\r\n   }\r\n\r\n   const menuType = ['item', 'collapse'];\r\n   const menuTypeName = menuType.map(m => ({label: m, value: m}))\r\n \r\n   const parentMenutitles = parentMenuitems?.map(pm => ({label: pm.title, value: pm.id}))\r\n\r\n    // redirect to dashboard\r\n    const backToDashboard = () => {\r\n      history.push(\"/\")\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n\r\n      <Card className='uapp-card-bg'>\r\n              <CardHeader className=\"page-header\">\r\n              \r\n                  <h3 className='text-white'>Assign Menu</h3>\r\n                  <div className=\"page-header-back-to-home\">\r\n                    <span onClick={backToDashboard} className='text-white'> <i class=\"fas fa-arrow-circle-left\"></i> Back to Dashboard</span>\r\n                  </div>\r\n              \r\n              </CardHeader>\r\n      </Card>\r\n      <Card>\r\n          <CardHeader>\r\n            <CardTitle>Create Menu</CardTitle>\r\n          </CardHeader>\r\n          <CardBody>\r\n      <Form onSubmit={handleSubmit} ref={myForm}>\r\n\r\n                  <FormGroup row>\r\n                    <Col md=\"2\">\r\n                    <i id=\"titleTooltip\" class=\"fas fa-info-circle menuIcon\"></i>\r\n                      <span className=\"pl-2\">Title</span>\r\n                    </Col>\r\n                    <UncontrolledTooltip\r\n                    placement=\"top\"\r\n                    target=\"titleTooltip\"\r\n\r\n                  >\r\n                    Your Menu Title\r\n                  </UncontrolledTooltip>\r\n                    <Col md=\"10\" lg=\"6\">\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        id=\"title\"\r\n                        placeholder=\"Menu Title\"\r\n                        onChange={(e)=>setTitle(e.target.value)}\r\n                        required\r\n                      />\r\n\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup row>\r\n                    <Col md=\"2\">\r\n                   <i id=\"iconTooltip\" class=\"fas fa-info-circle menuIcon\"></i>\r\n                      <span className=\"pl-2\">Icon</span>\r\n                    </Col>\r\n\r\n                    <UncontrolledTooltip\r\n                    placement=\"top\"\r\n                    target=\"iconTooltip\"\r\n                  >\r\n                    Your Menu Icon\r\n                  </UncontrolledTooltip>\r\n\r\n                    <Col md=\"10\" lg=\"6\">\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"icon\"\r\n                        id=\"icon\"\r\n                        placeholder=\"Icon\"\r\n                        required\r\n                        // onChange={(e)=>setIcon(e.target.value)}\r\n                      />\r\n\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup row>\r\n                    <Col md=\"2\">\r\n                    <i id=\"typeTooltip\" class=\"fas fa-info-circle menuIcon\"></i>\r\n                      <span className=\"pl-2\">Type</span>\r\n                    </Col>\r\n                    <UncontrolledTooltip\r\n                    placement=\"top\"\r\n                    target=\"typeTooltip\"\r\n                  >\r\n                    Your Menu Type\r\n                  </UncontrolledTooltip>\r\n                    <Col md=\"10\" lg=\"6\">\r\n                    <Select options={menuTypeName}\r\n                           value={{ label: type, value: type }}\r\n                           onChange={opt => selectMenuTypeName(opt.label, opt.value)}\r\n                           name=\"type\"\r\n                           id=\"type\"\r\n                           />\r\n\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  {\r\n                    type == \"item\" &&\r\n                    <FormGroup row>\r\n\r\n                    <Col md=\"2\">\r\n                    <i id=\"urlTooltip\" class=\"fas fa-info-circle menuIcon\"></i>\r\n                      <span className=\"pl-2\">Target Url</span>\r\n                    </Col>\r\n                    <UncontrolledTooltip\r\n                    placement=\"top\"\r\n                    target=\"urlTooltip\"\r\n                  >\r\n                    Your Menu Url\r\n                  </UncontrolledTooltip>\r\n                    <Col md=\"10\" lg=\"6\">\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"navLink\"\r\n                        id=\"navLink\"\r\n                        placeholder=\"Nav Link\"\r\n                        onChange={(e)=>setNavLink(e.target.value)}\r\n                        required\r\n                      />\r\n\r\n                    </Col>\r\n                  </FormGroup>\r\n                  }\r\n\r\n\r\n                  {\r\n                    type == \"item\" &&\r\n                    <FormGroup row>\r\n                    <Col md=\"2\">\r\n                    <i id=\"parentIdTooltip\" class=\"fas fa-info-circle menuIcon\"></i>\r\n                      <span className=\"pl-2\">Parent</span>\r\n                    </Col>\r\n                    <UncontrolledTooltip\r\n                    placement=\"top\"\r\n                    target=\"parentIdTooltip\"\r\n                  >\r\n                    Parent Menu's Title\r\n                  </UncontrolledTooltip>\r\n\r\n                    <Col md=\"10\" lg=\"6\">\r\n                    <Select options={parentMenutitles}\r\n                           value={{ label: parentTitle, value: parentValue }}\r\n                           onChange={opt => selectparentMenutitles(opt.label,opt.value)}\r\n                           name=\"parentId\"\r\n                           id=\"parentId\"\r\n                           required\r\n                           />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  }\r\n\r\n                  <FormGroup row>\r\n                    <Col md=\"2\">\r\n                    <i id=\"orderTooltip\" class=\"fas fa-info-circle menuIcon\"></i>\r\n                      <span className=\"pl-2\">Display Order</span>\r\n                    </Col>\r\n                    <UncontrolledTooltip\r\n                    placement=\"top\"\r\n                    target=\"orderTooltip\"\r\n                  >\r\n                    Order\r\n                  </UncontrolledTooltip>\r\n                    <Col md=\"10\" lg=\"6\">\r\n                    <Input\r\n                        type=\"number\"\r\n                        name=\"displayOrder\"\r\n                        value={displayOrder}\r\n                        id=\"displayOrder\"\r\n                        placeholder=\"Order\"\r\n                        onChange={(e)=> handleDisplayOrder(e)}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup style={{display: 'flex',justifyContent: 'space-between'}}>\r\n                        {/* <Button color=\"danger\" className=\"mr-1 mt-3\" onClick={()=>setModalOpen(false)}>Close</Button> */}\r\n                      \r\n                      <CustomButtonRipple\r\n                        type={\"submit\"}\r\n                        className={\"mr-1 mt-3 badge-primary\"}\r\n                        name={\"Submit\"}\r\n                        permission={6}\r\n                      />\r\n\r\n                  </FormGroup>\r\n\r\n              </Form>\r\n              </CardBody>\r\n              </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  parentMenuItems: state.parentMenuItemReducer.parentMenus\r\n})\r\n\r\nexport default connect(mapStateToProps)(Menu);\r\n","\r\nimport React from 'react'\r\n\r\n\r\nexport const StoreParentMenuItem = (data) => {\r\n\r\n  return {\r\n    type: 'StoreParentMenuItem',\r\n    payload: data\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nimport history from \"./history\";\r\nimport { rootUrl } from \"../constants/constants\";\r\n\r\nconst AuthStr = localStorage.getItem(\"token\");\r\n\r\nasync function post(url, body = {}, authToken = \"\") {\r\n  try {\r\n    const res = await axios.post(`${rootUrl}${url}`, body, {\r\n      headers: {\r\n        'authorization': AuthStr,\r\n      },\r\n    });\r\n    return await res;\r\n  } catch (error) {\r\n    if (error?.response?.status === 404) {\r\n      history.push(\"/404\");\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default post;\r\n","import React from 'react';\r\nimport {\r\n   \r\n    Button,\r\n  \r\n  } from \"reactstrap\";\r\n\r\nconst CustomButtonRipple = ({isDisabled, className, icon,color, permission, type,url, func, name}) => {\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n         \r\n            <Button.Ripple\r\n               disabled={isDisabled}\r\n               onClick={func}\r\n               color={color}\r\n               type={type}\r\n               className={className}\r\n             >\r\n               {name}\r\n            </Button.Ripple>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CustomButtonRipple;"],"sourceRoot":""}