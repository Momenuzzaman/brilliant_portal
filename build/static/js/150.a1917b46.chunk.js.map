{"version":3,"sources":["helpers/post.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardHeader.js","views/SMS/Branches/BranchManager/BranchTeamEmployeeInformation.js"],"names":["url","body","authToken","Axios","post","rootUrl","res","response","status","history","push","_excluded","propTypes","tag","tagPropType","inverse","PropTypes","bool","color","string","outline","className","cssModule","object","innerRef","oneOfType","func","Card","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","defaultProps","CardHeader","BranchTeamEmployeeInformation","useHistory","teamId","useParams","useState","teamDetails","setTeamDetails","setMenus","checked","setChecked","branchTeam","setBranchTeam","branchId","useToasts","addToast","localStorage","getItem","useEffect","get","then","console","log","action","selectBranchTeamName","defaultChecked","length","i","menu","isChecked","id","toString","map","branch","label","name","value","onClick","style","textAlign","details","key","firstName","lastName","email","phoneNumber"],"mappings":"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","file":"static/js/150.a1917b46.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\n\r\nimport history from './history'\r\nimport { rootUrl } from '../constants/constants'\r\n\r\n\r\nasync function post(url, body = {},authToken = \"\"){\r\n\r\n \r\n   \r\n   try {\r\n    const res = await Axios.post(`${rootUrl}${url}`,body,authToken || \"\")\r\n    return await res\r\n   }\r\n    catch (error) {\r\n\r\n        if(error?.response?.status  === 404){\r\n            history.push('/404')\r\n        }\r\n\r\n     \r\n\r\n        throw error\r\n   }\r\n   \r\n}\r\n\r\nexport default post\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\r\nimport { Button, ButtonGroup, Card, CardBody, CardHeader, Col, Form, FormGroup, Row, Table } from 'reactstrap';\r\nimport get from '../../../../helpers/get';\r\nimport Select from \"react-select\";\r\nimport post from '../../../../helpers/post';\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport { fontGrid } from '@mui/material/styles/cssUtils';\r\n\r\nconst BranchTeamEmployeeInformation = () => {\r\n    const history = useHistory();\r\n    const {teamId} = useParams();\r\n    const [teamDetails, setTeamDetails] = useState([]);\r\n    const serialNum = 1;\r\n    const [menus, setMenus] = useState([]);\r\n    let [checked, setChecked] = useState([]);\r\n    const [branchTeamLabel, setBranchTeamLabel] = useState(\"Select team\");\r\n    const [branchTeamValue, setBranchTeamValue] = useState();\r\n    const [branchTeam, setBranchTeam] = useState([]);\r\n    const {addToast} = useToasts();\r\n   \r\n    \r\n\r\n    const branchId = localStorage.getItem('branchId');\r\n\r\n    useEffect(()=> {\r\n      get(`BranchTeamEmployee/GetEmployee/${teamId}`)\r\n      .then(res => {\r\n        // console.log(res);\r\n        setTeamDetails(res)\r\n      })\r\n\r\n      get(`BranchTeam/GetbyBranch/${branchId}`).then((res) => {\r\n        console.log(\"Teams\", res);\r\n        setBranchTeam(res);\r\n      });\r\n\r\n      get(`BranchTeamEmployee/GetUnassigned/${teamId}`).then(action => {\r\n        selectBranchTeamName(action)\r\n        console.log(\"BranchTeam\",action);\r\n      })\r\n\r\n    },[])\r\n    const backToBranchList = () => {\r\n        history.push('/branchList');\r\n\r\n    }\r\n\r\n    const selectBranchTeamName = (action) => {\r\n      setMenus([]);\r\n      checked = [];\r\n      // setBranchTeamLabel(label);\r\n      // setBranchTeamValue(value);\r\n      // console.log('value',value);\r\n  \r\n     \r\n        console.log(\"Action\",action);\r\n        setMenus(action);\r\n  \r\n        let defaultChecked = checked;\r\n        if (action.length > 0) {\r\n          for (let i = 0; i < action.length; i++) {\r\n            const menu = action[i];\r\n            if (menu.isChecked === true) {\r\n              const id = menu.id.toString();\r\n              defaultChecked.push(id);\r\n              setChecked([...defaultChecked]);\r\n            }\r\n          }\r\n        }\r\n    \r\n    };\r\n\r\n      // handling checkbox\r\n      const handleCheck = (e) => {\r\n        let id = e.target.id;\r\n        let val = e.target.checked;\r\n    \r\n        if (val === true) {\r\n          setChecked([...checked, id]);\r\n        } else {\r\n          const index = checked.indexOf(id);\r\n          if (index > -1) {\r\n            checked.splice(index, 1);\r\n          }\r\n        }\r\n      };\r\n\r\n\r\n  const handleConfirm = (e) => {\r\n    e.preventDefault();\r\n \r\n    setMenus([]);\r\n      const subData = new FormData();\r\n      subData.append('teamId',  teamId);\r\n      subData.append('CheckedArray',checked);\r\n      \r\n      // posting form Data\r\n     post(`BranchTeamEmployee/Create`,subData).then((action)=> {\r\n   \r\n       if(action?.status == 200){\r\n         setChecked([]);\r\n            addToast(action?.data?.message, {\r\n              appearance:  'success',\r\n              autoDismiss: true,\r\n            })\r\n            history.push('/branchList');\r\n       }\r\n\r\n          \r\n      }) \r\n\r\n      // for( let val of subData.values()){\r\n      //   console.log(val);\r\n      // }\r\n\r\n\r\n\r\n\r\n  }\r\n    \r\n    const branchTeamName = branchTeam?.map((branch) => ({\r\n      label: branch.name,\r\n      value: branch.id,\r\n    }));\r\n  \r\n\r\n          // on Select All Checkbox\r\n  const handleSelectAll = (e) => {\r\n    let newChecked = [];\r\n    const val = e.target.checked;\r\n    if (val === true) {\r\n      menus.map((menu) => {\r\n        const menuId = menu.id.toString();\r\n        newChecked.push(menuId);\r\n        document.getElementById(menu.id).checked = true;\r\n      });\r\n      setChecked([...newChecked]);\r\n    }\r\n\r\n    if (val === false) {\r\n      {\r\n        menus.map((menu) => {\r\n          document.getElementById(menu.id).checked = false;\r\n        });\r\n        setChecked([]);\r\n      }\r\n    }\r\n  };\r\n  \r\n    return (\r\n        <div>\r\n            <Card className=\"uapp-card-bg\">\r\n        <CardHeader className=\"page-header\">\r\n\r\n          <h3 className=\"text-light\">Team Employee Details</h3>\r\n          <div className=\"page-header-back-to-home\" >\r\n            <span onClick={backToBranchList} className=\"text-light\"> <i className=\"fas fa-arrow-circle-left\"></i> Back to Branch List</span>\r\n          </div>\r\n\r\n        </CardHeader>\r\n      </Card>\r\n\r\n    \r\n      <Card>\r\n\r\n    {\r\n      teamDetails.length > 0 ? \r\n      <div className=\"table-responsive container mt-3\">\r\n      <Table className=\"table-sm table-bordered\" >\r\n        <thead className=\"thead-uapp-bg\">\r\n          <tr style={{ textAlign: \"center\" }}>\r\n         \r\n                        \r\n            <th>SL</th>                    \r\n            <th>First Name</th>                    \r\n            <th>Last Name</th>                    \r\n            <th>Email</th>                    \r\n            <th>Phone Number</th>                    \r\n                           \r\n          \r\n         \r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            teamDetails?.map((details,i) => <tr key={details?.id} style={{ textAlign: \"center\" }}>\r\n              \r\n\r\n           \r\n            <td>{serialNum + i}</td>\r\n            <td>{details?.firstName}</td>\r\n            <td>{details?.lastName}</td>\r\n            <td>{details?.email}</td>\r\n            <td>{details?.phoneNumber}</td>\r\n           \r\n          \r\n          \r\n         \r\n            \r\n           \r\n           \r\n          </tr>)\r\n\r\n          }\r\n\r\n        \r\n\r\n\r\n        </tbody>\r\n      </Table>\r\n\r\n    </div>  \r\n    :\r\n\r\n    <h5 className='text-center py-3'>Team Details Not Found</h5>\r\n    }\r\n\r\n        \r\n      </Card>\r\n\r\n      {/* <div>\r\n                <Card>\r\n                  <CardHeader className=\"page-header\">\r\n                    <h3>Assign Employee</h3>\r\n                    <div className=\"page-header-back-to-home\"></div>\r\n                  </CardHeader>\r\n\r\n                  <CardHeader>Select Team Member</CardHeader>\r\n\r\n                  <CardBody>\r\n                    <Form\r\n                      onSubmit={handleConfirm}\r\n                    \r\n                      className=\"pb-5 mb-5\">\r\n\r\n                        <input\r\n                        type='hidden'\r\n                        name='branchId'\r\n                        id='branchId'\r\n                        value={branchId}\r\n                        \r\n                        />\r\n\r\n                 \r\n\r\n                      <FormGroup>\r\n                        <Row>\r\n                          <Col sm=\"12\">\r\n                            {menus.length > 0 && (\r\n                              <div className=\"form-check\">\r\n                                <input\r\n                                  className=\"form-check-input\"\r\n                                  onChange={(e) => handleSelectAll(e)}\r\n                                  type=\"checkbox\"\r\n                                  name=\"\"\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"\">\r\n                                  Select All\r\n                                </label>\r\n                              </div>\r\n                            )}\r\n                          </Col>\r\n                          {\r\n                            menus?.map((menu) => (\r\n                              <Col xs=\"6\" sm=\"4\" md=\"3\" key={menu.id}>\r\n                                <div className=\"form-check\">\r\n                                  <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"checkbox\"\r\n                                    onChange={(e) => handleCheck(e)}\r\n                                    name=\"\"\r\n                                    id={menu.id}\r\n                                    defaultChecked={menu.isChecked}\r\n                                  />\r\n                                  <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"\"\r\n                                  >\r\n                                    {menu.firstName}\r\n                                  </label>\r\n                                  <label\r\n                                    className=\"form-check-label\"\r\n                                    htmlFor=\"\"\r\n                                  >\r\n                                    {menu.lastName}\r\n                                  </label>\r\n                                </div>\r\n                              </Col>\r\n                            ))}\r\n                        </Row>\r\n                      </FormGroup>\r\n\r\n                      <FormGroup\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"space-between\",\r\n                        }}\r\n                      >\r\n                        <Row>\r\n                          <Col>\r\n                            <Button.Ripple\r\n                              type=\"submit\"\r\n                              className=\"mr-1 mt-3 badge-primary\"\r\n                            >\r\n                              Submit\r\n                            </Button.Ripple>\r\n                          </Col>\r\n                        </Row>\r\n                      </FormGroup>\r\n                    </Form>\r\n                  </CardBody>\r\n                </Card>\r\n              </div> */}\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BranchTeamEmployeeInformation;"],"sourceRoot":""}